import groovy.json.JsonOutput
import groovy.json.JsonSlurper

group 'com.qaobee'
version '0.1'
apply plugin: 'org.sonarqube'
buildscript {
    repositories {
        maven {
            url "http://repo1.maven.org/maven2/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
    }
    dependencies {
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
        classpath "gradle.plugin.se.bjurr.gitchangelog:git-changelog-gradle-plugin:1.40"
    }
}
sonarqube {
    properties {
        // Sonar Specific properties
        // This is the display project name
        property 'sonar.projectName', 'QSwarmWeb'
        // This is the Sonar Server
        property 'sonar.host.url', 'http://build.qaobee.com:9000'
        property 'sonar.projectKey', 'com.qaobee:qswarm-web'
        property 'sonar.profile', 'Sonar way'
        property 'sonar.language', 'js'
        property 'sonar.sources', 'src/app'
    }
}

task gitChangelogTask(type: se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask) {
    filePath = "build/docs/changelog/index.html"
    templateContent = new File('changelog.mustache').getText('UTF-8')
    fromRef = getVersion(-5)
}

task updateRancherImage {
    def dockerVersion = findProperty("dockerVersion")
    if(dockerVersion != null) {
        def url = "http://vps234741.ovh.net:8080/v2-beta/projects/1a7/services/1s55/"
        def creds = "854D77F36BD20C5D89FE:p8ktQVdpEdGp4rwfJCfFoq5abCL2eYTXSHwee3ot"
        def p = ['curl', '-u', creds, '-H', "'Accept: application/json'", '-H', "'Content-Type: application/json'", url].execute()
        def json = new JsonSlurper().parseText(p.text).upgrade
        def imageUid = json.inServiceStrategy.launchConfig.imageUuid.split(':')
        println "upgrading  ${imageUid[1]} from ${imageUid[2]} to ${dockerVersion}"
        imageUid[2] = dockerVersion
        json.inServiceStrategy.launchConfig.imageUuid = imageUid.join(':')

        def req = new JsonSlurper().parseText('{"inServiceStrategy": {}}')
        req.inServiceStrategy = json.inServiceStrategy
        def request = JsonOutput.toJson(req)
        def r = ['bash', '-c', "curl -X POST -u ${creds} -H 'Content-Type: application/json' -d '${request}' ${url}?action=upgrade"].execute()
        def resp = new JsonSlurper().parseText(r.text)
        if (resp.type != "error") {
            def upgraded = false
            while (!upgraded) {
                Thread.sleep(2000L)
                def state = new JsonSlurper().parseText(['curl', '-u', creds, '-H', "'Accept: application/json'", '-H', "'Content-Type: application/json'", url].execute().text)
                println state.state
                upgraded = "upgraded" == state.state
                if("active" == state.state) return 0
            }
            ['bash', '-c', "curl -X POST -u ${creds} -H 'Content-Type: application/json' -d '{}' ${url}?action=finishupgrade"].execute()
        }
    }
}

def getVersion(inc) {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--abbrev=0', '--tags'
        standardOutput = stdout
    }
    def v = stdout.toString().trim().substring(1).tokenize('.').toArray()
    def gitVersion = [
            major: v[0].toInteger(),
            minor: v[1].toInteger(),
            patch: v[2].toInteger() + inc
    ]
    def version = 'v' + gitVersion.values().join('.')
    return version
}