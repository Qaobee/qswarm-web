/*! QSwarm-Web 2015-06-03 */
function JSON_CALLBACK(){}function JSON_CALLBACK(){}function ensureP(txt){"use strict";return txt.startsWith("<p>")?txt+"</p>":txt}function modalConfirm(heading,question,callback){"use strict";$("#modal-title").html(heading),$("#modal-body").html(question),$("#modal-ok-btn").click(function(event){callback(),$("#myModal").modal("hide")}),$("#myModal").modal("show")}function dateDiff(timestamp){"use strict";return Math.floor(((new Date).getTime()-timestamp)/315576e5)}function Board(name,numberOfColumns){return{name:name,numberOfColumns:numberOfColumns,columns:[]}}function Column(name){return{name:name,cards:[]}}function Phase(name){return{name:name,cards:[]}}function Card(personId,firstname,name,positionType,avatar){return this.personId=personId,this.firstname=firstname,this.name=name,this.positionType=positionType,this.avatar=avatar,this}angular.module("config",[]).constant("ENV",{name:"production",apiEndPoint:"http://www.qaobee.com",useLoaderCache:!0,debugEnabled:!1}),angular.module("adminmenu",[]).directive("adminmenu",["$http","eventbus",function($http,eventbus){"use strict";return{restrict:"E",scope:{level:"="},controller:["$scope",function($scope){$scope.isopen=[!1,!1,!1],$scope.isopen[$scope.level]=!0}],templateUrl:"templates/directives/adminmenu.html"}}]),angular.module("avatar",["angularFileUpload"]).directive("avatar",["FileUploader","$window","$rootScope","$log","ENV",function(FileUploader,$window,$rootScope,$log,ENV){"use strict";return{restrict:"AE",scope:{person:"=",width:"="},controller:["$scope","FileUploader","$modal",function($scope,FileUploader,$modal){var modal,modalOpened=!1;$scope.showSpinner=!1,$scope.uploader=new FileUploader({headers:{token:$window.sessionStorage.qaobeesession},autoUpload:!0,queueLimit:1}),$scope.getAvatar=function(avatar){return avatar?ENV.apiEndPoint+"/file/Person/"+avatar:"imgs/user.png"},$scope.modifyAvatar=function(){modalOpened=!0,modal=$modal.open({templateUrl:"templates/directives/setAvatarIndividuModal.html",controller:"setAvatarIndividuModalCtrl",backdrop:"true",scope:$scope,size:"md"}).result.then(function(){modalOpened=!1},function(){modalOpened=!1})},$scope.$watch("person",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(oldValue,newValue)&&($scope.uploader.url=ENV.apiEndPoint+"/file/Person/avatar/"+newValue._id)}),$scope.uploader.filters.push({name:"imageFilter",fn:function(item){var type="|"+item.type.slice(item.type.lastIndexOf("/")+1)+"|";return-1!=="|jpg|png|jpeg|gif|".indexOf(type)}}),$scope.uploader.onWhenAddingFileFailed=function(item,filter,options){$log.debug("onWhenAddingFileFailed",item,filter,options)},$scope.uploader.onAfterAddingFile=function(fileItem){$log.info("onAfterAddingFile",fileItem)},$scope.uploader.onProgressItem=function(){},$scope.uploader.onSuccessItem=function(fileItem,response){$scope.person.avatar=response.avatar,$scope.uploader.clearQueue()},$scope.uploader.onErrorItem=function(fileItem,response,status,headers){$log.info("onErrorItem",fileItem,response,status,headers),toastr.error(response)}}],templateUrl:"templates/directives/avatar.html"}}]).controller("setAvatarIndividuModalCtrl",["$scope","$modalInstance",function($scope,$modalInstance){"use strict";$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).directive("simpleAvatar",["ENV",function(ENV){"use strict";return{restrict:"AE",scope:{person:"=",width:"=",link:"="},controller:["$scope",function($scope){$scope.getAvatar=function(avatar){return avatar?ENV.apiEndPoint+"/file/Person/"+avatar:"imgs/user.png"}}],templateUrl:"templates/directives/simpleAvatar.html"}}]),angular.module("commonsDirectives",[]).directive("uniqueusername",["userInfosAPI","$log",function(userInfosAPI,$log){"use strict";return{require:"ngModel",restrict:"A",link:function(scope,element,attrs,ngModel){element.bind("blur",function(){if(ngModel&&element.val()){var currentValue=element.val();userInfosAPI.usernameTest(currentValue).then(function(unique){$log.debug(unique.data),unique.data.status?ngModel.$setValidity("unique",!1):ngModel.$setValidity("unique",!0)})}})}}}]).directive("checkStrength",function(){"use strict";return{restrict:"EAC",scope:{check:"="},link:function(scope,iElement){var strength={colors:["#F00","#F90","#FF0","#9F0","#0F9D58"],mesureStrength:function(p){angular.isDefined(p)&&null!==p||(p="");var _force=0,_regex=/[$-/:-?{-~!"^_`\[\]]/g,_lowerLetters=/[a-z]+/.test(p),_upperLetters=/[A-Z]+/.test(p),_numbers=/[0-9]+/.test(p),_symbols=_regex.test(p),_flags=[_lowerLetters,_upperLetters,_numbers,_symbols],_passedMatches=$.grep(_flags,function(el){return el===!0}).length;return _force+=2*p.length+(p.length>=10?1:0),_force+=10*_passedMatches,_force=p.length<=6?Math.min(_force,10):_force,_force=1==_passedMatches?Math.min(_force,10):_force,_force=2==_passedMatches?Math.min(_force,20):_force,_force=3==_passedMatches?Math.min(_force,40):_force},getColor:function(s){var idx=0;return idx=10>=s?0:20>=s?1:30>=s?2:40>=s?3:4,{idx:idx+1,col:this.colors[idx]}}};scope.$watch("check",function(newValue){if(angular.isUndefined(newValue)||""===newValue)iElement.css({display:"none"});else{var c=strength.getColor(strength.mesureStrength(newValue));iElement.css({display:"inline"}),iElement.children("li").css({background:"#DDD"}).slice(0,c.idx).css({background:c.col})}},!0)},template:'<li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li><li class="point"></li>'}}).directive("uiDateNoValidate",["$filter","$log",function($filter,$log){"use strict";return{require:"ngModel",scope:{dateOption:"=",model:"="},link:function($scope,elem,attrs,ngModel){$scope.dateOption.dateFormat=$filter("translate")("date.format")}}}]).directive("uiDate",["$filter",function($filter){"use strict";return{require:"ngModel",scope:{dateOption:"="},link:function($scope,elem,attrs,ngModel){function checkDate(newDate){var myDate=moment(newDate,$scope.dateOption.dateFormat.toUpperCase()),val=myDate.valueOf();myDate.isValid()?($scope.dateOption.val=val,$scope.dateOption.minDate<val&&$scope.dateOption.maxDate>val?ngModel.$setValidity("uiDate",!0):ngModel.$setValidity("uiDate",!1)):ngModel.$setValidity("uiDate",!1)}ngModel.$setValidity("uiDate",!0),$scope.$watch(function(){return ngModel.$modelValue},function(newValue,oldValue){angular.equals(oldValue,newValue)||checkDate(newValue)}),$scope.dateOption.dateFormat=$filter("translate")("date.format"),""!==elem.val()&&ngModel.$setValidity("uiDate",!0),elem.mask($scope.dateOption.dateFormat.replace(/\w/gi,"9"),{completed:function(){checkDate(this.val())}})}}}]).directive("passwdCheck",function(){"use strict";return{require:"ngModel",link:function(scope,elem,attrs,ctrl){var firstPassword="#"+attrs.passwdCheck;elem.add(firstPassword).on("keyup",function(){scope.$apply(function(){var v=elem.val()===$(firstPassword).val();ctrl.$setValidity("pwmatch",v)})})}}}).directive("aboutPhotos",function(){"use strict";return{restrict:"AE",scope:{aboutname:"=",abouttitle:"=",aboutdesc:"=",aboutemail:"=",abouttwitter:"=?",aboutgithub:"=?"},controller:["$scope","$filter","$log",function($scope,$filter,$log){$scope.content={},$scope.content.html='<h4 class="center-block" >'+$filter("translate")($scope.abouttitle)+'</h4><p style="text-align: justify">'+$filter("translate")($scope.aboutdesc),$scope.content.html+='</p><ul class="list-inline center-block" style="text-align: center;"><li><a href="mailto:'+$filter("translate")($scope.aboutemail),$scope.content.html+='" title="'+$filter("translate")($scope.aboutemail)+'" target="_blank"><span class="social-icon fa fa-envelope-square"></span></a></li>',$filter("translate")($scope.abouttwitter).isBlank()||($scope.content.html+='<li><a href="https://twitter.com/'+$filter("translate")($scope.abouttwitter),$scope.content.html+='" title="@'+$filter("translate")($scope.abouttwitter)+'"target="_blank"><span class="social-icon fa fa-twitter-square"></span></a></li>'),$filter("translate")($scope.aboutgithub).isBlank()||($scope.content.html+='<li><a href="https://github.com/'+$filter("translate")($scope.aboutgithub),$scope.content.html+='" title="Fork me, I\'m famous" target="_blank"><span class="social-icon fa fa-github-square"></span></a></li>'),$scope.content.html+="</ul>"}],link:function(scope,el){function hideThis(){$(el).popover("hide")}function updatePop(content){$(el).popover({html:!0,content:content,placement:"bottom",animation:!1,trigger:"manual",template:'<div class="popover" onmouseover="$(this).prev().attr(\'focused\', true);$(this).mouseleave(function() {$(this).prev().attr(\'focused\', false);if(\'true\' !== $(this).prev().attr(\'focusedImg\')) {$(this).popover(\'hide\');}});"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content"><p></p></div></div></div>'}).mouseenter(function(){$(this).attr("focusedImg",!0),$(this).popover("show")}).mouseleave(function(){$(this).attr("focusedImg",!1);var focused=$(this).attr("focused");setTimeout(function(){"true"!==focused&&hideThis()},50)})}scope.$watch("content",function(newValue,oldValue){updatePop(newValue.html)})},templateUrl:"templates/directives/aboutPhotos.html"}}).directive("repeatDone",function(){"use strict";return function(scope){scope.$last&&$.material.init()}}),angular.module("headerMenu",["header.notifications","eventbus","userMetaAPI"]).directive("headerMenu",["eventbus","userInfosAPI","userMetaAPI","$rootScope","$cookieStore","$location","$window","$log","$translatePartialLoader",function(eventbus,userInfosAPI,userMetaAPI,$rootScope,$cookieStore,$location,$window,$log,$translatePartialLoader){"use strict";return{restrict:"AE",controller:["$scope",function($scope){$translatePartialLoader.addPart("ui"),$translatePartialLoader.addPart("menu"),$scope.signin={},$rootScope.$on("$viewContentLoaded",function(){function is_touch_device(){try{return document.createEvent("TouchEvent"),!0}catch(e){return!1}}is_touch_device()&&$("#nav-mobile").css({overflow:"auto"}),$(".parallax").parallax(),$(".dropdown-button").dropdown(),$(".button-collapse").sideNav({menuWidth:240,edge:"left",closeOnClick:!0}),$(".modal-trigger").leanModal({dismissible:!0,opacity:.7,in_duration:600,out_duration:200}),$(".tooltipped").tooltip({delay:50})}),$scope.loadMetaInfos=function(){userMetaAPI.getMetas().success(function(data){angular.isDefined(data)&&null!==data&&($rootScope.meta=data,$scope.structure=data.structure)})},$scope.$on("eventbus",function(){if("logoff"===eventbus.message)$log.debug("logoff"),delete $scope.user,delete $window.sessionStorage.qaobeesession,($location.path().startsWith("/private")||$location.path().startsWith("/admin")||$location.path().startsWith("/firstconnection"))&&$location.path("");else if("login"===eventbus.message)$scope.user=eventbus.data,$scope.loadMetaInfos();else if("title"===eventbus.message)$scope.title=eventbus.data;else if("refreshUser"===eventbus.message){var data=eventbus.data;data.isAdmin=!1,angular.isDefined(data.account)&&null!==data.account.habilitations&&data.account.habilitations.forEach(function(a){"admin_qaobee"===a.key&&(data.isAdmin=!0)}),$rootScope.user=data}}),$scope.logoff=function(){userInfosAPI.logoff().success(function(data){eventbus.prepForBroadcast("logoff",data),delete $rootScope.user,delete $rootScope.meta,delete $scope.user})},$scope.login=function(){userInfosAPI.logon($scope.signin.login,$scope.signin.passwd).success(function(data){if($("#modalLogin").closeModal(),data.account.active){var paid=!0;angular.forEach(data.account.listPlan,function(plan){"open"===plan.status&&(paid=!1)}),paid?($window.sessionStorage.qaobeesession=data.account.token,$rootScope.user=data,$scope.user=data,eventbus.prepForBroadcast("login",data),angular.isDefined(data.account.firstConnexion)&&data.account.firstConnexion===!0?$location.path("/firstconnection"):(data.isAdmin=!1,angular.isDefined(data.account)&&null!==data.account.habilitations&&data.account.habilitations.forEach(function(a){"admin_qaobee"===a.key&&(data.isAdmin=!0)}),$location.path("/private"))):$location.path("/notPaid")}else toastr.warning($filter("translate")("popup.warning.unregistreduser"))}).error(function(error){error&&($rootScope.errMessSend=!0,error.code&&"NON_ACTIVE"===error.code?toastr.warning($filter("translate")("popup.warning.unregistreduser")):toastr.error(error.message)),$log.error(error)})}}],templateUrl:"templates/directives/headerMenu.html"}}]),angular.module("header.notifications",["notificationsRestAPI","eventbus"]).directive("headerNotifications",["$modal","$rootScope","$interval","ngAudio","notificationsRestAPI","eventbus","$timeout","$window","$filter",function($modal,$rootScope,$interval,ngAudio,notificationsRestAPI,eventbus,$timeout,$window,$filter){"use strict";return{restrict:"AE",controller:["$scope",function($scope){$scope.notifications=[],$scope.unreadNum=0,$scope.getNotifications=function(){if(angular.isDefined($rootScope.user)&&null!==$window.sessionStorage.qaobeesession&&angular.isDefined($window.sessionStorage.qaobeesession)){var timeoutObj;notificationsRestAPI.getuserNotifications(5).success(function(data){if(!angular.isUndefined(data)&&null!==data){var newCount=data.count(function(n){return n.read===!1});if(newCount>$scope.unreadNum){ngAudio.play("audio/notification.mp3");var elem=$("[header-notifications]");elem.popover({html:!0,content:$filter("translate")("content.notification.new : "+newCount),placement:"bottom",animation:!0,trigger:"manual",template:'<div class="popover" onmouseover="clearTimeout(timeoutObj);$(this).mouseleave(function() {$(this).hide();});"><div class="arrow"></div><div class="popover-inner"><h3 class="popover-title"></h3><div class="popover-content" style="text-align: center;"><p></p></div></div></div>'}).mouseleave(function(e){var ref=$(this);timeoutObj=setTimeout(function(){ref.popover("hide")},50)}),elem.popover("show"),$timeout(function(){elem.popover("hide")},2e3)}$scope.unreadNum=newCount,$scope.notifications=data}})}},$scope.$on("eventbus",function(){"login"===eventbus.message?$scope.getNotifications():"refreshNotifications"===eventbus.message&&$scope.getNotifications()});var stopNotificationPooler=$interval(function(){$scope.getNotifications()},6e4);$scope.$on("$destroy",function(){$interval.cancel(stopNotificationPooler),delete $scope.notifications,delete $scope.unreadNum});var ModalInstanceNotifCtrl=function($scope,$modalInstance,notifications,id,$filter){$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.n=notifications.find(function(n){return n._id===id}),$scope.markRead=function(id){notificationsRestAPI.markAsRead(id).success(function(data){$scope.n.read=!$scope.n.read,$scope.cancel(),eventbus.prepForBroadcast("refreshNotifications","")})},$scope.del=function(id){modalConfirm($filter("translate")("popup.title.delete.notification"),$filter("translate")("popup.message.delete")+".<br />"+$filter("translate")("popup.confirm.ask"),function(){notificationsRestAPI.del(id).success(function(data){notifications.remove($scope.n),eventbus.prepForBroadcast("refreshNotifications",data),$scope.cancel(),toastr.success($scope.n.title+$filter("translate")("popup.success.delete"))})})},$scope.openNotifModal=function(size,id){$modal.open({templateUrl:"templates/directives/notificationDetail.html",controller:ModalInstanceNotifCtrl,size:size,resolve:{notifications:function(){return $scope.notifications},id:function(){return id}}})}};ModalInstanceNotifCtrl.$inject=["$scope","$modalInstance","notifications","id","$filter"]}],templateUrl:"templates/directives/headerNotifications.html"}}]),angular.module("widget.calendar",["ui.calendar"]).directive("widgetCalendar",["$filter",function($filter){"use strict";return{restrict:"AE",scope:{events:"="},controller:["$scope",function($scope){$scope.eventSources=[$scope.events],$scope.alertOnEventClick=function(event,allDay,jsEvent,view){$scope.alertMessage=event.title+" was clicked "},$scope.alertOnDrop=function(event,dayDelta,minuteDelta,allDay,revertFunc,jsEvent,ui,view){$scope.alertMessage="Event Droped to make dayDelta "+dayDelta},$scope.alertOnResize=function(event,dayDelta,minuteDelta,revertFunc,jsEvent,ui,view){$scope.alertMessage="Event Resized to make dayDelta "+minuteDelta},$scope.remove=function(index){$scope.events.splice(index,1)},$scope.changeView=function(view,calendar){calendar.fullCalendar("changeView",view)},$scope.renderCalender=function(calendar){calendar.fullCalendar("render")},$scope.uiConfig={calendar:{height:250,editable:!1,weekNumbers:!0,weekNumberTitle:"",header:{left:"",center:"",right:""},titleFormat:{month:"MMMM yyyy",week:"MMM d[ yyyy]{ '&#8212;'[ MMM] d yyyy}",day:"dddd, MMM d, yyyy"},columnFormat:{month:"ddd",week:"ddd M/d",day:"dddd M/d"},buttonText:{today:"today",month:"month",week:"week",day:"day"},firstDay:0}},$scope.uiConfig.calendar.titleFormat.month=$filter("translate")("content.calendar.titleformat.month"),$scope.uiConfig.calendar.titleFormat.week=$filter("translate")("content.calendar.titleformat.week"),$scope.uiConfig.calendar.titleFormat.day=$filter("translate")(),$scope.uiConfig.calendar.columnFormat.month=$filter("translate")("content.calendar.columnformat.month"),$scope.uiConfig.calendar.columnFormat.week=$filter("translate")("content.calendar.columnformat.week"),$scope.uiConfig.calendar.columnFormat.day=$filter("translate")("content.calendar.columnformat.day"),$scope.uiConfig.calendar.firstDay=$filter("translate")("content.calendar.firstday"),$scope.uiConfig.calendar.buttonText.today=$filter("translate")("content.calendar.buttontext.today"),$scope.uiConfig.calendar.buttonText.month=$filter("translate")("content.calendar.buttontext.month"),$scope.uiConfig.calendar.buttonText.week=$filter("translate")("content.calendar.buttontext.week"),$scope.uiConfig.calendar.buttonText.day=$filter("translate")("content.calendar.buttontext.day")}],templateUrl:"templates/directives/widgets/calendar.html"}}]),angular.module("widget.weather",[]).factory("myHttp",["$http","myCache",function($http,myCache){"use strict";var headers={cache:myCache,dataType:"json"},APPID="bc1e24c531732375aece237bb2a5d49a";return{config:headers,get:function(url,success,fail){return $http.get(url+"&APPID="+APPID,this.config)},getLocal:function(url,success,fail){return $http.get(url)},jsonp:function(url,success,fail){return $http.jsonp(url,this.config)}}}]).factory("weatherApi",["myHttp",function(myHttp){"use strict";return{getWeeklyWeather:function(city){return myHttp.get("http://api.openweathermap.org/data/2.5/forecast/daily?q="+city+"&mode=json&units=metric")}}}]).factory("myCache",["$cacheFactory",function($cacheFactory){"use strict";return $cacheFactory("myCache",{capacity:100})}]).directive("widgetWeather",["weatherApi",function(weatherApi){"use strict";return{restrict:"AE",scope:{place:"=",height:"=?"},controller:["$scope","$element",function($scope,$element){var statCell=$element.children(1).children(1).children(1).children(1).children(1),statPanel=$element.children(1).children(1).children(1).children(1);$scope.inheight=$scope.height||Math.min(statCell.outerHeight(),120),$scope.currentTime=moment().format("h:mm a"),$scope.flipped=!1,$scope.place.then(function(place){weatherApi.getWeeklyWeather(place.city+","+place.country).then(function(response){$scope.data=response.data,$element.children(1).height(statPanel.outerHeight()),$scope.inheight=statPanel.outerHeight(),angular.isDefined($scope.data.list)&&$scope.data.list.length&&$scope.data.list.forEach(function(i,v){var date=moment(1e3*i.dt);i.dt={day:date.format("ddd")},moment().format("d")===date.format("d")&&(i.dt.today=!0)})})}),$scope.toggle=function(){$scope.flipped=!$scope.flipped},$scope.flipFront=function(){$scope.flipped=!1},$scope.flipBack=function(){$scope.flipped=!0}}],templateUrl:"templates/directives/widgets/meteo.html"}}]),angular.module("widget.news",["publicRestAPI"]).directive("widgetNews",function(){"use strict";return{restrict:"AE",scope:{limit:"="},controller:["$scope","publicRestAPI",function($scope,publicRestAPI){$scope.blogs=Array.create(),publicRestAPI.getBlogs($scope.limit).success(function(data){$scope.blogs=data})}],templateUrl:"templates/directives/widgets/news.html"}}),angular.module("widget.notifications",["notificationsRestAPI","eventbus"]).directive("widgetNotifications",["eventbus","notificationsRestAPI","$filter",function(eventbus,notificationsRestAPI,$filter){"use strict";return{restrict:"AE",scope:{height:"=?",nbNotif:"=?"},controller:["$scope","$element",function($scope,$element){var statCell=$element.children(1).children(1).children(1).children(1).children(1),statPanel=$element.children(1).children(1).children(1).children(1);$scope.flipped=!1,$scope.inheight=$scope.height||Math.min(statCell.outerHeight(),120),$scope.nbNotif=$scope.nbNotif||5,$scope.notifications=Array.create(),$scope.unreadNum=0,$scope.$on("eventbus",function(){"refreshNotifications"===eventbus.message&&$scope.getNotifications()}),$scope.getNotifications=function(){notificationsRestAPI.getuserNotifications($scope.nbNotif).success(function(data){$scope.unreadNum=data.count(function(n){return n.read===!1}),$scope.notifications=data,$scope.inheight=statPanel.outerHeight(),$element.children(1).height(statPanel.outerHeight())})},$scope.getNotifications(),$scope.markRead=function(id){var notif=$scope.notifications.find(function(n){return n._id===id});notificationsRestAPI.markAsRead(id).success(function(data,status,headers,config){notif.read=!notif.read,eventbus.prepForBroadcast("refreshNotifications","")})},$scope.del=function(id){var notif=$scope.notifications.find(function(n){return n._id===id});modalConfirm($filter("translate")("popup.title.delete.notification"),$filter("translate")("popup.message.delete")+title+".<br />"+$filter("translate")("popup.confirm.ask"),function(){notificationsRestAPI.del(id).success(function(data){$scope.notifications.remove(notif),eventbus.prepForBroadcast("refreshNotifications",""),toastr.success(notif.title+$filter("translate")("popup.success.delete"))})})},$scope.toggle=function(){$scope.flipped=!$scope.flipped},$scope.flipFront=function(){$scope.flipped=!1},$scope.flipBack=function(){$scope.flipped=!0}}],templateUrl:"templates/directives/widgets/notifications.html"}}]),angular.module("palmaresEffectiveWidget",["structureCfgRestAPI","personRestAPI","statAPI","ngTable"]).directive("palmaresEffective",["$translatePartialLoader","structureCfgRestAPI","$log","personRestAPI","ngTableParams","$filter","statAPI","$location",function($translatePartialLoader,structureCfgRestAPI,$log,personRestAPI,ngTableParams,$filter,statAPI,$location){return{restrict:"E",scope:{effective:"=",meta:"="},controller:["$scope",function($scope){$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("widgets"),$scope.goalscored={title:"palmaresEffective.stat.goalscored"},$scope.playtime={title:"palmaresEffective.stat.playtime"},$scope.attendance={title:"palmaresEffective.stat.attendance"},$scope.eventNotePerson={title:"palmaresEffective.stat.eventNotePerson"},$scope.stats=Array.create($scope.goalscored,$scope.playtime,$scope.attendance,$scope.eventNotePerson),$scope.$watch("effective",function(newValue,oldValue){if(!angular.equals(newValue,oldValue)){var ownersId=$scope.effective.map(function(n){return n._id}),indicators=Array.create("goalscored"),search={listIndicators:indicators,listOwners:ownersId,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"SUM",listFieldsGroupBy:["code","owner"],listFieldsSortBy:[{fieldName:"value",sortOrder:-1}],limitResult:1};statAPI.getStatGroupBy(search).success(function(data){data.forEach(function(a){personRestAPI.getPerson(a._id.owner).success(function(data){Object.merge($scope.goalscored,{owner:data,value:a.value})})})}),indicators=Array.create("playtime"),search={listIndicators:indicators,listOwners:ownersId,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"SUM",listFieldsGroupBy:["code","owner"],listFieldsSortBy:[{fieldName:"value",sortOrder:-1}],limitResult:1},statAPI.getStatGroupBy(search).success(function(data){data.forEach(function(a){personRestAPI.getPerson(a._id.owner).success(function(data){Object.merge($scope.playtime,{owner:data,value:a.value+"'"})})})}),indicators=Array.create("eventNotePerson"),search={listIndicators:indicators,listOwners:ownersId,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"AVG",listFieldsGroupBy:["code","owner"],listFieldsSortBy:[{fieldName:"value",sortOrder:-1}],limitResult:1},statAPI.getStatGroupBy(search).success(function(data){data.forEach(function(a){personRestAPI.getPerson(a._id.owner).success(function(data){Object.merge($scope.eventNotePerson,{owner:data,value:a.value.isInteger()?a.value:$filter("number")(a.value,2)})})})}),indicators=Array.create("attendance"),search={listIndicators:indicators,listOwners:ownersId,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"AVG",listFieldsGroupBy:["code","owner"],listFieldsSortBy:[{fieldName:"value",sortOrder:-1}],limitResult:1},statAPI.getStatGroupBy(search).success(function(data){data.forEach(function(a){personRestAPI.getPerson(a._id.owner).success(function(data){Object.merge($scope.attendance,{owner:data,value:100*a.value+" %"})})})})}}),$scope.displayPlayerSheet=function(id){$location.path("/private/playersheet/"+id)}}],templateUrl:"templates/directives/widgets/palmaresEffective.html"}}]),angular.module("planingSessionWidget",["sessionRestAPI"]).directive("planing",["$translatePartialLoader","structureCfgRestAPI","$log","sessionRestAPI","ngTableParams","$filter","statAPI","$rootScope","$location",function($translatePartialLoader,structureCfgRestAPI,$log,sessionRestAPI,ngTableParams,$filter,statAPI,$rootScope,$location){return{restrict:"E",scope:{customerInfo:"=info"},controller:["$scope",function($scope){$scope.planingData=[],$scope.tablePlaning=new ngTableParams({page:1,count:3,filter:{},sorting:{name:"asc"}},{total:function(){return $scope.planingData.length},getData:function($defer,params){params.total($scope.planingData.length);var orderedData=params.sorting()?$filter("orderBy")($scope.planingData,params.orderBy()):$scope.planingData;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}}),sessionRestAPI.getListSession("U19","EL MARZGIOUI").success(function(data){$scope.planingData.push(data)})}],templateUrl:"templates/directives/widgets/planingSession.html"}}]),angular.module("staffListWidget",["structureCfgRestAPI","userMetaAPI","ngTable"]).directive("staffListWidget",["structureCfgRestAPI","$rootScope","$log","userMetaAPI","ngTableParams","$filter","$q",function(structureCfgRestAPI,$rootScope,$log,userMetaAPI,NgTableParams,$filter,$q){"use strict";return{restrict:"E",scope:{category:"=",group:"=",color:"=?",height:"=?"},controller:["$scope","$element","$location",function($scope,$element,$location){var statCell=$element.children(1).children(1).children(1).children(1).children(1),statPanel=$element.children(1).children(1).children(1).children(1),staffprom=$q.defer();$scope.staffprom=staffprom.promise,$scope.staff=[],$scope.flipped=!1,$scope.color=$scope.color||"muted",$scope.height=$scope.height||Math.min(statCell.outerHeight(),120),$scope.toggle=function(){$scope.flipped=!$scope.flipped},$scope.flipFront=function(){$scope.flipped=!1},$scope.flipBack=function(){$scope.flipped=!0},$scope.tableParams=new NgTableParams({page:1,count:10,filter:{}},{total:function(){return $scope.staff.length},counts:[],getData:function($defer,params){var filteredData=$scope.staff,orderedData=params.sorting()?$filter("orderBy")(filteredData,params.orderBy()):filteredData;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}}),$scope.$watch("category",function(newValue,oldValue){angular.isDefined($scope.category)&&($scope.staff=[],$scope.category.listStaffMember.forEach(function(value){null!==value.personId&&($scope.staff.push(value),userMetaAPI.getUserById(value.personId).success(function(data){value.user=data,value.roleLabel=value.role.label,value.firstname=data.firstname,value.name=data.name,angular.element(".flip").height(angular.element(".stat-panel").outerHeight()),$element.children(1).height(statPanel.outerHeight())}))}),$scope.tableParams.reload())}),$scope.$watch("group",function(newValue,oldValue){angular.equals(newValue,oldValue)||angular.isDefined($scope.group.listStaffMember)&&($scope.staff=[],$scope.group.listStaffMember.forEach(function(value){null!==value.personId&&($scope.staff.push(value),userMetaAPI.getUserById(value.personId).success(function(data){value.user=data,value.firstname=data.firstname,value.name=data.name,value.roleLabel=value.role.label,angular.element(".flip").height(angular.element(".stat-panel").outerHeight()),$scope.tableParams.reload(),$element.children(1).height(statPanel.outerHeight())}))}),$scope.tableParams.reload())}),$scope.displayPlayerSheet=function(id){$location.path("/private/playersheet/"+id)}}],templateUrl:"templates/directives/widgets/staffList.html"}}]),angular.module("statWidget",["chart.js","statAPI","eventbus"]).directive("statWidget",["$log","statAPI","$filter","$translatePartialLoader","eventbus",function($log,statAPI,$filter,$translatePartialLoader,eventbus){"use strict";return{restrict:"E",scope:{data:"=?",statHeight:"@",editable:"=?",screen:"=?",meta:"="},controller:["$scope",function($scope){function buildGraph(){if($scope.loaded=!1,null!==$scope.data){var val=$filter("translate")("stat."+$scope.data.stat+".val");isNaN(val)||(val=parseInt(val,10));var search={listIndicators:Array.create($scope.data.stat),listOwners:$scope.data.owners,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,value:val,aggregat:$scope.data.aggregat,listFieldsGroupBy:$scope.data.listFieldsGroupBy,listFieldsSortBy:$scope.data.listFieldsSortBy,limitResult:$scope.data.limitResult},type=1;("Pie"===$scope.data.type||"PolarArea"===$scope.data.type||"Doughnut"===$scope.data.type||"Radar"===$scope.data.type)&&(type=2);var lineColors="#fff";switch("muted"===$scope.data.color&&(lineColors="#000"),type){case 1:$scope.myChart.data.series=Array.create($filter("translate")("stat."+$scope.data.stat+".libelle")),statAPI.getStatGroupBy(search).success(function(data){$scope.myChart.data.labels=[],$scope.myChart.data.datasets=[[]],$scope.myChart.options.scaleOverride=!0,$scope.myChart.options.scaleStartValue=0,$scope.myChart.options.scaleStepWidth=20,$scope.myChart.options.scaleSteps=5;var inverseSort=$scope.data.inverseSort;inverseSort&&data.reverse(),data.forEach(function(a){$scope.myChart.data.labels.push(moment(a._id.timer).format($filter("translate")("date.format"))),$scope.myChart.data.datasets[0].push(parseFloat($filter("number")(100*a.value,2)))}),0===data.length&&($scope.myChart.data.series=Array.create($filter("translate")("stat.novalue",{name:$filter("translate")("stat."+$scope.data.stat+".libelle")}))),$scope.loaded=!0});break;case 2:statAPI.getStatGroupBy(search).success(function(data){var datasets=[],labels=[];data.forEach(function(a){datasets.push(a.value),labels.push($filter("translate")("stat."+$scope.data.stat+".value."+a._id.value))}),$scope.myChart={options:{scaleLineColor:lineColors,scaleFontSize:10,scaleFontColor:lineColors,tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutBack"},data:{labels:labels,datasets:datasets}},0===data.length?("Radar"!==$scope.data.type?(datasets.push(0),labels.push(Array.create($filter("translate")("stat.novalue",{name:$filter("translate")("stat."+$scope.data.stat+".libelle")})))):$scope.myChart.data.datasets=[datasets],$scope.myChart.data.series=Array.create($filter("translate")("stat.novalue",{name:$filter("translate")("stat."+$scope.data.stat+".libelle")}))):"Radar"===$scope.data.type&&data.length>0&&($scope.myChart.data.datasets=[datasets],$scope.myChart.data.series=Array.create($filter("translate")("stat."+$scope.data.stat+".libelle"))),$scope.loaded=!0});break;case 3:statAPI.getListDetailValue(search).success(function(data){
if(!angular.isUndefined(data)&&null!==data){$log.debug(data);var dataset=[];data.forEach(function(a){dataset.push({value:a.listParam.value,color:"#F38630"})}),$scope.myChart={data:{datasets:dataset},options:{}},$scope.loaded=!0}})}}}function fetchStatNames(){statAPI.getSimpleList({activityId:$scope.meta.season.activityId,countryId:$scope.meta.season.countryId,screen:[$scope.screen]}).success(function(data){$scope.stats=data,data.forEach(function(a){$log.debug("codestat "+a.code),a.code===$scope.data.stat[0]&&($scope.curstat=a)})})}$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("widgets"),$translatePartialLoader.addPart("format"),$scope.loaded=!1,angular.isUndefined($scope.editable)&&($scope.editable=!1),$scope.ownersLoaded=!1,$scope.stats=[],$scope.statHeight=parseInt($scope.statHeight,10),$scope.flipped=!1,$scope.myChart={options:{animation:!0,scaleLineColor:"#666",scaleFontSize:10,scaleFontColor:"#666",tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutQuart"},data:{labels:[],series:[],datasets:[[]]}},$scope.data.prom.then(function(result){fetchStatNames(),$scope.data.owners=result,$scope.data.color=$scope.data.color||"muted",$scope.data.type=$scope.data.type||"Line",$scope.data.stat=$scope.data.stat||"",$scope.stats.forEach(function(a){a.code===$scope.data.stat[0]&&($scope.curstat=a)}),$scope.type=$scope.data.type,buildGraph()}),$scope.$on("eventbus",function(){"ownersId"===eventbus.message&&($scope.data.owners=eventbus.data,buildGraph())}),$scope.toggle=function(){$scope.flipped=!$scope.flipped,$scope.flipped||($scope.data.type=$scope.type,$scope.data.stat=$scope.curstat.code,buildGraph())},$scope.$on("$destroy",function(){delete $scope.myChart})}],templateUrl:"templates/directives/widgets/statWidget.html"}}]),angular.module("widget.structure",["angular-flip","leaflet-directive"]).directive("widgetStructure",["$rootScope",function($rootScope){"use strict";return{restrict:"AE",scope:{structure:"=",height:"=?",user:"="},controller:["$scope","$element",function($scope,$element){$scope.flipped=!1,$scope.loc={lat:40,lon:-73},$scope.markers={mainMarker:{zoom:12}};var statCell=$element.children(1).children(1).children(1).children(1).children(1),statPanel=$element.children(1).children(1).children(1).children(1);$scope.height=$scope.height||Math.min(statCell.outerHeight(),120),$scope.selectStructure=function(structure){$scope.actualStructure=structure,null===structure.addressStr.formatedAddress&&(structure.addressStr.formatedAddress=structure.addressStr.place+" "+structure.addressStr.zipcode+" "+structure.addressStr.city+" "+structure.addressStr.country),$scope.height=statPanel.outerHeight(),$element.children(1).height(statPanel.outerHeight()),$scope.flipFront(),$scope.geoCode(structure.addressStr.formatedAddress)},$scope.gotoLocation=function(lat,lon){($scope.lat!==lat||$scope.lon!==lon)&&($scope.loc={lat:lat,lon:lon},$scope.markers={mainMarker:{lat:lat,lng:lon,zoom:12},markers:{mainMarker:{focus:!0,message:$scope.structure.label,lat:lat,lng:lon}}})},$scope.geoCode=function(address){this.geocoder||(this.geocoder=new google.maps.Geocoder),this.geocoder.geocode({address:address},function(results,status){if(status===google.maps.GeocoderStatus.OK){var loc=results[0].geometry.location;$scope.search=results[0].formatted_address,$scope.gotoLocation(loc.lat(),loc.lng())}})},$scope.structure.then(function(structure){$scope.actualStructure=structure,null===structure.addressStr.formatedAddress&&(structure.addressStr.formatedAddress=structure.addressStr.place+" "+structure.addressStr.zipcode+" "+structure.addressStr.city+" "+structure.addressStr.country),$scope.height=statPanel.outerHeight(),$element.children(1).height(statPanel.outerHeight()),$scope.flipFront(),$scope.geoCode(structure.addressStr.formatedAddress)}),$scope.toggle=function(){$scope.flipped=!$scope.flipped},$scope.flipFront=function(){$scope.flipped=!1},$scope.flipBack=function(){$scope.flipped=!0}}],templateUrl:"templates/directives/widgets/structure.html"}}]),angular.module("unavailableEffectiveWidget",["structureCfgRestAPI","userMetaAPI","statAPI","ngTable"]).directive("unavailableEffective",["$translatePartialLoader","structureCfgRestAPI","$log","userMetaAPI","ngTableParams","$filter","statAPI","$location",function($translatePartialLoader,structureCfgRestAPI,$log,userMetaAPI,ngTableParams,$filter,statAPI,$location){return{restrict:"E",scope:{effective:"=",meta:"="},controller:["$scope",function($scope){$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("widgets"),$scope.effectiveData=[],$scope.tableIndispo=new ngTableParams({page:1,count:3,filter:{},sorting:{name:"asc"}},{total:function(){return $scope.effectiveData.length},getData:function($defer,params){params.total($scope.effectiveData.length);var orderedData=params.sorting()?$filter("orderBy")($scope.effectiveData,params.orderBy()):$scope.effectiveData;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}}),$scope.$watch("effective",function(newValue,oldValue){angular.equals(newValue,oldValue)||($scope.effectiveData=[],newValue.forEach(function(a){angular.isUndefined(a.status)?userMetaAPI.getUserById(a._id).success(function(data){"unavailable"===data.status.availability.value&&($scope.effectiveData.push(data),$scope.tableIndispo.reload())}):"unavailable"===a.status.availability.value&&$scope.effectiveData.push(a)}),$scope.tableIndispo.reload())}),$scope.displayPlayerSheet=function(id){$location.path("/private/playersheet/"+id)}}],templateUrl:"templates/directives/widgets/unavailableEffective.html"}}]);try{angular.module("templates-main")}catch(err){angular.module("templates-main",[])}angular.module("QaobeeSwarnApp",["ngRoute","commonsDirectives","config","prive","public","headerMenu","eventbus","playerList","ngSanitize","ngCookies","pascalprecht.translate","reCAPTCHA","ngAudio","templates-main","httpModule","tmh.dynamicLocale"]).config(["$translateProvider","$translatePartialLoaderProvider","reCAPTCHAProvider","$httpProvider","$logProvider","ENV","tmhDynamicLocaleProvider",function($translateProvider,$translatePartialLoaderProvider,reCAPTCHAProvider,$httpProvider,$logProvider,ENV,tmhDynamicLocaleProvider){"use strict";tmhDynamicLocaleProvider.localeLocationPattern("js/libs/angular-i18n/angular-locale_{{locale}}.js"),$translateProvider.useLoader("$translatePartialLoader",{urlTemplate:"js/i18n/{part}/{lang}.json"}),$translateProvider.useLoaderCache(ENV.useLoaderCache),$logProvider.debugEnabled(ENV.debugEnabled),$translateProvider.registerAvailableLanguageKeys(["fr","en","de"],{fr_FR:"fr",en_US:"en",en_UK:"en",de_DE:"de",de_CH:"de"}),$translateProvider.determinePreferredLanguage(),reCAPTCHAProvider.setPublicKey("6LdoTvMSAAAAAP4NTyay0WljN19Aq4Cl5pZELvIe"),reCAPTCHAProvider.setOptions({theme:"clean"}),$httpProvider.defaults.useXDomain=!0,delete $httpProvider.defaults.headers.common["X-Requested-With"],$httpProvider.interceptors.push("httpInterceptor")}]).run(["$rootScope","$translate","$log","$locale","tmhDynamicLocale",function($rootScope,$translate,$log,$locale,tmhDynamicLocale){"use strict";$locale.id=$translate.proposedLanguage(),tmhDynamicLocale.set($locale.id),$rootScope.$on("$translatePartialLoaderStructureChanged",function(){$translate.refresh()})}]).controller("MainCtrl",["$rootScope","$scope","$translatePartialLoader","eventbus",function($rootScope,$scope,$translatePartialLoader,eventbus){"use strict";$translatePartialLoader.addPart("legacy"),toastr.options={closeButton:!0,debug:!1,newestOnTop:!0,progressBar:!0,positionClass:"toast-top-right",preventDuplicates:!1,onclick:null,showDuration:"300",hideDuration:"1000",timeOut:"5000",extendedTimeOut:"1000",showEasing:"swing",hideEasing:"linear",showMethod:"fadeIn",hideMethod:"fadeOut"},$scope.$on("eventbus",function(){"logoff"===eventbus.message?delete $scope.user:"login"===eventbus.message&&($scope.user=eventbus.data)})}]),angular.module("admin",["users","habilitations","blogAdmin","activities","adminmenu","adminMetricsAPI","nvd3ChartDirectives","leaflet-directive","adminUsersAPI","locationAPI"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/admin",{controller:"AdminCtrl",templateUrl:"templates/admin/admin.html"})}]).controller("AdminCtrl",["$scope","eventbus","adminMetricsAPI","$log","$interval","adminUsersAPI","locationAPI",function($scope,eventbus,adminMetricsAPI,$log,$interval,adminUsersAPI,locationAPI){$scope.meters=Array.create(),$scope.metersValues=Array.create(),$scope.timers=Array.create(),$scope.markers=Array.create(),$scope.layers={baselayers:{googleRoadmap:{name:"Google Streets",layerType:"ROADMAP",type:"google"}},overlays:{realworld:{name:"Real world data",type:"markercluster",visible:!0}}},adminUsersAPI.get().success(function(data,status,headers,config){angular.forEach(data,function(value,key){if(value.address.lat){var m={layer:"realworld"};m.lat=value.address.lat,m.lng=value.address.lng,m.message=value.firstname+" "+value.name,$scope.markers.push(m)}else{var address=value.address.place+" "+value.address.zipcode+" "+value.address.city+" "+value.address.country;locationAPI.get(address).then(function(adr){if(adr.data.results.length>0){var m={layer:"realworld",lat:adr.data.results[0].geometry.location.lat,lng:adr.data.results[0].geometry.location.lng,message:value.firstname+" "+value.name};$scope.markers.push(m)}})}},$scope.markers)}),$scope.xAxisTickFormat_Date_Format=function(){return function(d){return moment.unix(d).format("HH:mm:ss  ")}},$scope.getMeters=function(){adminMetricsAPI.getMeters().success(function(data,status,headers,config){$scope.meters=Array.create(),angular.forEach(data,function(v,k){var m={};m.key=k;var value=Array.create(moment().unix(),v.mean.ceil(2));angular.isDefined($scope.metersValues[k])||($scope.metersValues[k]=Array.create()),$scope.metersValues[k].push(value),$scope.metersValues[k].length>20&&$scope.metersValues[k].removeAt(0,Math.max(0,$scope.metersValues[k].length-20)),m.values=$scope.metersValues[k],this.push(m)},$scope.meters)})},$scope.getTimers=function(){adminMetricsAPI.getTimers().success(function(data,status,headers,config){$scope.timers=[],angular.forEach(data,function(v,k){var m={};m.key=k,m.values=[[v.count,(v.mean/1e6).ceil(2)]],this.push(m)},$scope.timers)})};var metrixPooler=$interval(function(){$scope.getMeters(),$scope.getTimers()},5e3);$scope.getMeters(),$scope.getTimers(),$scope.$on("$destroy",function(){$interval.cancel(metrixPooler)})}]),angular.module("habilitations",["adminHabilitAPI","adminmenu"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/admin/habilitations",{controller:"AdminHabilitCtrl",templateUrl:"templates/admin/habilits.html"}).when("/admin/habilitations/edit/:id",{controller:"AdminHabilitDetailCtrl",templateUrl:"templates/admin/habilitsDetail.html"}).when("/admin/habilitations/new",{controller:"AdminHabilitAddCtrl",templateUrl:"templates/admin/habilitsDetail.html"})}]).controller("AdminHabilitCtrl",["$scope","eventbus","adminHabilitAPI","$filter",function($scope,eventbus,adminHabilitAPI,$filter){$scope.habilits=void 0,$scope.loadData=function(){adminHabilitAPI.get().success(function(data){$scope.habilits=data})},$scope.del=function(idhabilit,key){modalConfirm($filter("translate")("popup.title.delete.habilit"),$filter("translate")("popup.message.delete")+key+".<br />"+$filter("translate")("popup.confirm.ask"),function(){adminHabilitAPI.del(idhabilit).success(function(data,status,headers,config){toastr.success(key+$filter("translate")("popup.success.delete")),$scope.loadData()})})},$scope.loadData()}]).controller("AdminHabilitAddCtrl",["$scope","eventbus","adminHabilitAPI","$http","$location",function($scope,eventbus,adminHabilitAPI,$http,$location){$scope.curhabilit={},$scope.curhabilit.key="no_name",$scope.addorupdate=function(){adminHabilitAPI.add($scope.curhabilit).success(function(data){toastr.success(data.key+$filter("translate")("popup.success.added")),$location.path("/admin/habilitations/edit/"+data._id)})}}]).controller("AdminHabilitDetailCtrl",["$scope","eventbus","adminHabilitAPI","$routeParams","$location","$filter",function($scope,eventbus,adminHabilitAPI,$routeParams,$location,$filter){$scope.curhabilit={},$scope.loadData=function(){adminHabilitAPI.getDetail($routeParams.id).success(function(data){$scope.curhabilit=data})},$scope.addorupdate=function(){$scope.signupForm.$valid&&(console.log("Form is valid"),adminHabilitAPI.add($scope.curhabilit).success(function(data){$location.path("/admin/habilitations"),toastr.success(data.key+$filter("translate")("popup.success.updated"))}))},$scope.loadData()}]),angular.module("activities",["activityAPI","adminmenu"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/admin/activities",{controller:"AdminActivityCtrl",templateUrl:"templates/prive/administration/settings/activities.html"}).when("/admin/activities/edit/:id",{controller:"AdminActivityDetailCtrl",templateUrl:"templates/prive/administration/settings/activityDetail.html"}).when("/admin/activities/new",{controller:"AdminActivityAddCtrl",templateUrl:"templates/prive/administration/settings/activityDetail.html"})}]).controller("AdminActivityCtrl",["$scope","eventbus","activityAPI","$location","$filter",function($scope,eventbus,activityAPI,$location,$filter){$scope.activities=[],$scope.loadData=function(){activityAPI.getList().success(function(data){$scope.activities=data})},$scope.del=function(idActivity,key){modalConfirm($filter("translate")("popup.title.delete.Activity"),$filter("translate")("popup.message.delete")+key+".<br />"+$filter("translate")("popup.confirm.ask"),function(){activityAPI.del(idActivity).success(function(data,status,headers,config){toastr.success(key+$filter("translate")("popup.success.delete")),$scope.loadData()})})},$scope.loadData()}]).controller("AdminActivityAddCtrl",["$scope","eventbus","activityAPI","$http","$location","$filter",function($scope,eventbus,activityAPI,$http,$location,$filter){$scope.curactivity={},$scope.curactivity.name="no_name",$scope.addorupdate=function(){activityAPI.add($scope.curactivity).success(function(data){toastr.success(data.name+$filter("translate")("popup.success.added")),$location.path("/admin/activities/edit/"+data._id)})}}]).controller("AdminActivityDetailCtrl",["$scope","eventbus","activityAPI","$routeParams","$location","$filter",function($scope,eventbus,activityAPI,$routeParams,$location,$filter){$scope.curactivity={},$scope.loadData=function(){activityAPI.getDetail($routeParams.id).success(function(data){$scope.curactivity=data})},$scope.addorupdate=function(){activityAPI.add($scope.curactivity).success(function(data,status,headers,config){$location.path("/admin/activities"),toastr.success(data.name+$filter("translate")("popup.success.updated"))})},$scope.loadData()}]),angular.module("users",["adminUsersAPI","adminHabilitAPI","adminmenu","locationAPI","angularFileUpload"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/admin/users",{controller:"AdminUsersCtrl",templateUrl:"templates/admin/users.html"}).when("/admin/users/edit/:id",{controller:"AdminUserDetailCtrl",templateUrl:"templates/admin/usersDetail.html"}).when("/admin/users/new",{controller:"AdminUserAddCtrl",templateUrl:"templates/admin/usersDetail.html"})}]).controller("AdminUsersCtrl",["$scope","eventbus","adminUsersAPI","$location","$filter",function($scope,eventbus,adminUsersAPI,$location,$filter){$scope.users=Array.create(),$scope.loadData=function(){adminUsersAPI.get().success(function(data){$scope.users=data})},$scope.del=function(iduser,username){modalConfirm($filter("translate")("popup.title.delete.user"),$filter("translate")("popup.message.delete")+username+".<br />"+$filter("translate")("popup.confirm.ask"),function(){adminUsersAPI.del(iduser).success(function(data,status,headers,config){toastr.success(username+$filter("translate")("popup.success.delete")),$scope.loadData()})})},$scope.loadData()}]).controller("AdminUserAddCtrl",["$scope","eventbus","adminUsersAPI","adminHabilitAPI","$http","$location","$filter","locationAPI","$q",function($scope,eventbus,adminUsersAPI,adminHabilitAPI,$http,$location,$filter,locationAPI,$q){$scope.dateOption={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date},$scope.curuser={address:{}},$scope.curuser.name=$filter("translate")("message.anonymous"),$scope.habilits=Array.create(),$scope.habilitsFiltred=Array.create(),$scope.loadTags=function(query){var deferred=$q.defer();return adminHabilitAPI.getByKey(query).success(function(data){data.each(function(n){$scope.habilitsFiltred.add({text:n.key})}),$scope.habilits=data,deferred.resolve($scope.habilitsFiltred)}),deferred.promise},$scope.addorupdate=function(){$scope.curuser.birthdate=$scope.dateOption.val;var habilits=Array.create();$scope.curuser.habilitations.each(function(n){habilits.add($scope.habilits.find(function(h){return h.key==n.text}))}),$scope.curuser.habilitations=habilits,null===$scope.curuser.address.formatedAddress||$scope.curuser.address.formatedAddress.isBlank()?adminUsersAPI.add($scope.curuser).success(function(data){toastr.success(data.forname+" "+data.name+$filter("translate")("popup.success.added")),$location.path("/admin/users/edit/"+data._id)}):locationAPI.get($scope.curuser.address.formatedAddress).then(function(adr){$scope.curuser.address.lat=adr.data.results[0].geometry.location.lat,$scope.curuser.address.lng=adr.data.results[0].geometry.location.lng,angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("street_number")>0&&($scope.curuser.address.address=item.long_name+" "),item.types.count("route")>0&&($scope.curuser.address.address+=item.long_name),item.types.count("locality")>0&&($scope.curuser.address.city=item.long_name),item.types.count("postal_code")>0&&($scope.curuser.address.zipcode=item.long_name),item.types.count("country")>0&&($scope.curuser.address.country=item.long_name)}),adminUsersAPI.add($scope.curuser).success(function(data){toastr.success(data.forname+" "+data.name+$filter("translate")("popup.success.added")),$location.path("/admin/users/edit/"+data._id)})})},$scope.getLocation=function(val){return locationAPI.get(val).then(function(res){var addresses=Array.create();return angular.forEach(res.data.results,function(item){addresses.push(item.formatted_address)}),addresses})}}]).controller("AdminUserDetailCtrl",["$scope","eventbus","adminUsersAPI","adminHabilitAPI","$routeParams","$location","$filter","$q","$rootScope","locationAPI","FileUploader",function($scope,eventbus,adminUsersAPI,adminHabilitAPI,$routeParams,$location,$filter,$q,$rootScope,locationAPI,FileUploader){$scope.dateOption={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date},$scope.loadTags=function(query){var deferred=$q.defer();return adminHabilitAPI.getByKey(query).success(function(data){data.each(function(n){$scope.habilitsFiltred.add({text:n.key})}),$scope.habilits=data,deferred.resolve($scope.habilitsFiltred)}),deferred.promise},$scope.loadUser=function(){adminHabilitAPI.get().success(function(data){$scope.habilits=data}),adminUsersAPI.getDetail($routeParams.id).success(function(data){$scope.curuser=data;var habilits=Array.create();$scope.birthdate=moment(data.birthdate).format($filter("translate")("date.format")),null!==$scope.curuser.habilitations&&($scope.curuser.habilitations.each(function(n){habilits.add({text:n.key})}),$scope.curuser.habilitations=habilits)})},$scope.addorupdate=function(){if($scope.signupForm.$valid){angular.isDefined($scope.passwd)&&""!==$scope.passwd&&($scope.curuser.passwd=$scope.passwd);var habilits=Array.create();$scope.curuser.habilitations.each(function(n){habilits.add($scope.habilits.find(function(h){return h.key==n.text}))}),$scope.curuser.habilitations=habilits,$scope.curuser.birthdate=$scope.dateOption.val,null===$scope.curuser.address.formatedAddress||$scope.curuser.address.formatedAddress.isBlank()?adminUsersAPI.add($scope.curuser).success(function(data){$location.path("/admin/users"),toastr.success(data.forname+" "+data.name+$filter("translate")("popup.success.updated"))}):locationAPI.get($scope.curuser.address.formatedAddress).then(function(adr){$scope.curuser.address.lat=adr.data.results[0].geometry.location.lat,$scope.curuser.address.lng=adr.data.results[0].geometry.location.lng,angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("street_number")>0&&($scope.curuser.address.place=item.long_name+" "),item.types.count("route")>0&&($scope.curuser.address.place+=item.long_name),item.types.count("locality")>0&&($scope.curuser.address.city=item.long_name),item.types.count("postal_code")>0&&($scope.curuser.address.zipcode=item.long_name),item.types.count("country")>0&&($scope.curuser.address.country=item.long_name)}),adminUsersAPI.add($scope.curuser).success(function(data){$location.path("/admin/users"),toastr.success(data.forname+" "+data.name+$filter("translate")("popup.success.updated"))})})}},$scope.upload=function(){var config={headers:{token:$rootScope.token,uid:$scope.curuser._id}};FileUploader.send("/file/avatar",document.getElementById("avatar").files,config).then(function(result){adminUsersAPI.getDetail($routeParams.id).success(function(data){$scope.curuser.avatar=data.avatar,toastr.success(data.forname+" "+data.name+$filter("translate")("popup.success.updated")),document.getElementById("avatar").value=""})})},$scope.getLocation=function(val){return locationAPI.get(val).then(function(res){var addresses=Array.create();return angular.forEach(res.data.results,function(item){addresses.push(item.formatted_address)}),addresses})},$scope.loadUser()}]),angular.module("firstConnectWizzard",["structureCfgRestAPI","userMetaAPI"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/firstconnection",{controller:"FirstConnectCtrl",templateUrl:"templates/prive/wizards/firstConnexion.html"})}]).controller("FirstConnectCtrl",["$scope","$location","eventbus","$rootScope","$log","WizardHandler","structureCfgRestAPI","userMetaAPI",function($scope,$location,eventbus,$rootScope,$log,WizardHandler,structureCfgRestAPI,userMetaAPI){$scope.categories=Array.create(),$scope.selectedPlan={},$scope.user={},$rootScope.$watch(function(){return $rootScope.user},function(newValue,oldValue){angular.isDefined(newValue)&&($scope.user=newValue)}),$scope.selectPlan=function(plan){$scope.selectedPlan=plan,$scope.season=$rootScope.season,structureCfgRestAPI.getCategoriesAgeStrList($rootScope.season.code,$scope.selectedPlan.structure._id).success(function(data){$scope.categories=data}),WizardHandler.wizard().next()},$scope.selectCat=function(cat){$scope.selectedCat=cat,angular.forEach($scope.selectedCat.listStaffMember,function(member,key){userMetaAPI.getUserById(member.personId).success(function(data){$scope.selectedCat.listStaffMember[key].member=data})}),WizardHandler.wizard().next()},$scope.$on("$destroy",function(){delete $scope.user,delete $scope.selectedPlan,delete $scope.categories,delete $scope.selectedCat})}]),angular.module("effectiveMod",["common-config","labelsAPI","structureCfgRestAPI","effectiveRestAPI","statWidget","userMetaAPI","profileRestAPI","groupAPI","statAPI","activityCfgRestAPI","locationAPI","personRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/effective/dashboard/:currentCategory/:currentGroup",{controller:"DashboardCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/dashboard.html"}).when("/private/effective/player/add",{controller:"AddPlayerCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/addPlayer.html"})}]).controller("DashboardCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","personRestAPI","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","user","meta",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,personRestAPI,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,user,meta){function fetchGroups(){groupAPI.getActiveGroupsCategory($scope.meta.structure._id,$scope.currentCategory.code).success(function(data){$scope.groups=[],$scope.groups.add({label:"Tous",_id:"-1"}),$scope.currentGroup=$scope.groups[0],data.forEach(function(a){$scope.groups.push(a)});var found=!1;$scope.groups.forEach(function(g){g._id===$scope.currentGroupId&&(found=!0)}),$scope.players=[],$scope.selection=[],$scope.getEffective(!0),$location.url("/private/effective/dashboard/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)})}var lastRoute=$route.current;$scope.user=user,$scope.meta=meta,$scope.isGraphsCollapsed=!1,$scope.isMoreDataCollapsed=!0,eventbus.prepForBroadcast("left-menu","effective.dashboard"),$scope.$on("$locationChangeSuccess",function(){lastRoute.$$route.originalPath===$route.current.$$route.originalPath&&($route.current=lastRoute)}),$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("widgets"),$scope.currentCategoryId=$routeParams.currentCategory,$scope.currentGroupId=$routeParams.currentGroup,$scope.$watch(function(){return $filter("translate")("effective.dashboard.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.prefloaded=!1,$scope.ownersId=$q.defer(),$scope.categories=[],$scope.groups=[],$scope.effective=[],$scope.effectiveSave=[],$scope.selection=[];var effectiveprom=$q.defer();$scope.effectiveprom=effectiveprom.promise,$scope.userparams={0:{type:"Line",color:"muted",height:120,stat:["attendance"],aggregat:"AVG",listFieldsGroupBy:["code","timer"],listFieldsSortBy:[{fieldName:"_id.timer",sortOrder:-1}],limitResult:5,inverseSort:!0},1:{type:"Doughnut",color:"muted",height:120,stat:["positionType"],aggregat:"COUNT",listFieldsGroupBy:["code","value"]},2:{color:"muted",height:350},3:{color:"muted",type:"Radar",height:250,stat:["stateForm"],aggregat:"COUNT",listFieldsGroupBy:["code","value"]}},structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,found=!0)})}),found||($scope.currentCategory=data[0]),fetchGroups()}),$scope.buildData=function(param){return param.prom=$scope.ownersId.promise,param},$scope.toggleSelection=function(id){var idx=$scope.selection.indexOf(id);idx>-1?$scope.selection.splice(idx,1):3===$scope.selection.length?(angular.element("#check-"+id).attr("checked",!1),toastr.warning($filter("translate")("effective.dashboard.selectionLimit"))):$scope.selection.push(id)},$scope.openCompareModal=function(){0===$scope.selection.length?toastr.warning($filter("translate")("effective.dashboard.selectionMin")):($scope.players=[],$scope.effective.forEach(function(p){$scope.selection.find(p._id)&&$scope.players.add(p)}),$modal.open({templateUrl:"templates/prive/organization/effective/playerCompareModal.html",controller:"PlayerCompareCtrl",size:"lg",resolve:{players:function(){return $scope.players},meta:function(){return $scope.meta}}}).result.then(function(){$scope.players=[],$scope.selection=[]},function(){$scope.players=[],$scope.selection=[]}))},$scope.tableEffectives=new ngTableParams({page:1,count:25,filter:{},sorting:{name:"asc"}},{total:function(){return $scope.effective.length},counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")($scope.effective,params.orderBy()):$scope.effective;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count())),$timeout(function(){$.material.init()},500)}}),$scope.$watch("currentCategory",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&($scope.groups=[],fetchGroups())}),$scope.$watch("currentGroup",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&("-1"!==newValue._id?$scope.groups.forEach(function(a){if(a._id===newValue._id){var members=[],ownersId=[];a.members.forEach(function(b){$scope.effectiveSave.forEach(function(c){b===c._id&&(members.push(c),ownersId.push(c._id))})}),$scope.players=[],$scope.selection=[],$scope.ownersId.resolve(ownersId),effectiveprom.resolve(members),eventbus.prepForBroadcast("ownersId",ownersId),$scope.effective=members,$scope.tableEffectives.total(members.length),$scope.tableEffectives.reload(),$location.url("/private/effective/dashboard/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}}):($scope.players=[],$scope.selection=[],$scope.getEffective(!0),$location.url("/private/effective/dashboard/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)))}),$scope.getEffective=function(refreshGraphs){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,$scope.currentCategory.code).success(function(data){var listId=[];data.forEach(function(a){listId=a.members});var listField=new Array("_id","name","firstname","avatar","status","physicalFolder","technicalFolder","mentalFolder");personRestAPI.getListPerson(listId,listField).success(function(data){effectiveprom.resolve(data),data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType="",e.birthdate=$filter("date")(e.birthdate,"yyyy"),e.age=moment().format("YYYY")-e.birthdate,e.weight=e.status.weight,e.height=e.status.height}),$scope.effective=data;var ownersId=[];data.forEach(function(a){a.stats={holder:0,substitue:0,playtime:0},ownersId.push(a._id)}),$scope.ownersId.resolve(ownersId),refreshGraphs&&eventbus.prepForBroadcast("ownersId",ownersId),$scope.tableEffectives.total(data.length),$scope.tableEffectives.reload();var search={listIndicators:["holder","substitue"],listOwners:ownersId,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"COUNT",listFieldsGroupBy:["owner","code"]};statAPI.getStatGroupBy(search).success(function(data){angular.isUndefined(data)||null===data||data.forEach(function(a){var i=$scope.effective.findIndex(function(n){return n._id===a._id.owner});"holder"===a._id.code?$scope.effective[i].stats.holder=a.value:$scope.effective[i].stats.substitue=a.value})}),search={listIndicators:["playtime"],listOwners:ownersId,startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"SUM",listFieldsGroupBy:["owner","code"]},statAPI.getStatGroupBy(search).success(function(data){angular.isUndefined(data)||null===data||data.forEach(function(a){var i=$scope.effective.findIndex(function(n){return n._id===a._id.owner});$scope.effective[i].stats.playtime=a.value})}),$scope.effectiveSave=$scope.effective})})},$scope.displayPlayerSheet=function(id){$location.path("/private/playersheet/"+id)}}]).controller("PlayerCompareCtrl",["$scope","$modalInstance","players","meta","$log","$filter","$translatePartialLoader","statAPI",function($scope,$modalInstance,players,meta,$log,$filter,$translatePartialLoader,statAPI){$scope.players=players,$scope.meta=meta;var mouse={x:0,y:0,offset:0};$scope.getMousePos=function(event){mouse.x=event.pageX,mouse.y=event.pageY,mouse.offset=$(window).scrollTop()};var indicators=Array.create("playtime","goalscored","holder","substitue"),colours=Array.create("#03A9F4","#0F9D58","#FF5722");$scope.colours=[],$scope.rgbaColors=Array.create({fillColor:"rgba(3, 169, 244, 0.2)",strokeColor:"rgba(3, 169, 244, 1)",pointColor:"rgba(3, 169, 244, 1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",
pointHighlightStroke:"rgba(3, 169, 244, 0.8)"},{fillColor:"rgba(15, 157, 88, 0.2)",strokeColor:"rgba(15, 157, 88, 1)",pointColor:"rgba(15, 157, 88, 1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(15, 157, 88, 0.8)"},{fillColor:"rgba(255, 87, 34, 0.2)",strokeColor:"rgba(255, 87, 34, 1)",pointColor:"rgba(255, 87, 34, 1)",pointStrokeColor:"#fff",pointHighlightFill:"#fff",pointHighlightStroke:"rgba(255, 87, 34, 0.8)"}),$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.myRadarChart={options:{scaleFontSize:0,tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutQuart",pointLabelFontSize:0,customTooltips:function(tooltip){var tooltipEl=$("#chartjs-tooltip");if(!tooltip)return void tooltipEl.css({opacity:0});tooltipEl.removeClass("above below"),tooltipEl.addClass(tooltip.yAlign);for(var innerHtml="<b>"+tooltip.title+"</b>",i=tooltip.labels.length-1;i>=0;i--)innerHtml+=['<div class="chartjs-tooltip-section">','	<span class="chartjs-tooltip-key" style="background-color:'+tooltip.legendColors[i].fill+'"></span>','	<span class="chartjs-tooltip-value">'+tooltip.labels[i]+"</span>","</div>"].join("");tooltipEl.html(innerHtml),tooltipEl.css({opacity:1,left:mouse.x+40-angular.element("#playerCompareModal")[0].parentElement.parentElement.offsetLeft+"px",top:mouse.y-mouse.offset+angular.element("#playerCompareModal")[0].parentElement.parentElement.offsetParent.scrollTop+"px",fontFamily:tooltip.fontFamily,fontSize:tooltip.fontSize,fontStyle:tooltip.fontStyle})}},data:{labels:[],series:[],datasets:[[]]}},$scope.myChart={options:{scaleFontSize:10,tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutQuart",pointLabelFontSize:0,customTooltips:function(tooltip){var tooltipEl=$("#chartjs-tooltip");if(!tooltip)return void tooltipEl.css({opacity:0});tooltipEl.removeClass("above below"),tooltipEl.addClass(tooltip.yAlign);for(var innerHtml="<b>"+tooltip.title+"</b>",i=tooltip.labels.length-1;i>=0;i--)innerHtml+=['<div class="chartjs-tooltip-section">','	<span class="chartjs-tooltip-key" style="background-color:'+tooltip.legendColors[i].fill+'"></span>','	<span class="chartjs-tooltip-value">'+tooltip.labels[i]+"</span>","</div>"].join("");tooltipEl.html(innerHtml),tooltipEl.css({opacity:1,left:mouse.x+40-angular.element("#playerCompareModal")[0].parentElement.parentElement.offsetLeft+"px",top:mouse.y-mouse.offset+angular.element("#playerCompareModal")[0].parentElement.parentElement.offsetParent.scrollTop+"px",fontFamily:tooltip.fontFamily,fontSize:tooltip.fontSize,fontStyle:tooltip.fontStyle})}},data:{labels:[],series:[],datasets:[[]]}},$scope.attendanceOptions=angular.copy($scope.myChart.options),$scope.attendanceOptions.scaleOverride=!0,$scope.attendanceOptions.scaleStartValue=0,$scope.attendanceOptions.scaleStepWidth=20,$scope.attendanceOptions.scaleSteps=5,$scope.technicalRadar={datasets:[],series:[],labels:[]},$scope.physicalRadar={datasets:[],series:[],labels:[]},$scope.mentalRadar={datasets:[],series:[],labels:[]},$scope.goals={datasets:[],labels:[]},$scope.playtime={datasets:[],labels:[]},$scope.attendance={datasets:[],labels:[]};var serie=0;$scope.stats=[],$scope.players.forEach(function(){$scope.goals.datasets.push([0]),$scope.goals.labels.push(""),$scope.playtime.datasets.push([0]),$scope.playtime.labels.push(""),$scope.attendance.datasets.push([0]),$scope.attendance.labels.push("")}),$scope.players.forEach(function(p){var playtimeCount=0;$scope.stats[p._id]=[],$scope.colours[p._id]=colours[serie],angular.forEach(indicators,function(value){$scope.stats[p._id][value]={sum:0,avg:0,count:0,freq:0}}),$scope.stats[p._id].attendance={sum:0,avg:0,count:0,freq:0},$scope.myChart.data.series.push(p.firstname+" "+p.name),$scope.technicalRadar.datasets.push([]),$scope.physicalRadar.datasets.push([]),$scope.mentalRadar.datasets.push([]),p.technicalFolder.forEach(function(a){0===serie&&$scope.technicalRadar.labels.push($filter("translate")("playerSheet.rubrics.technical.label."+a.key)),$scope.technicalRadar.datasets[serie].push(a.value)}),p.physicalFolder.forEach(function(a){0===serie&&$scope.physicalRadar.labels.push($filter("translate")("playerSheet.rubrics.physical.label."+a.key)),$scope.physicalRadar.datasets[serie].push(a.value)}),p.mentalFolder.forEach(function(a){0===serie&&$scope.mentalRadar.labels.push($filter("translate")("playerSheet.rubrics.mental.label."+a.key)),$scope.mentalRadar.datasets[serie].push(a.value)});var search={listIndicators:indicators,listOwners:[p._id],startDate:$scope.meta.season.startDate,endDate:$scope.meta.season.endDate,aggregat:"AVG",listFieldsGroupBy:["code"],serie:serie};statAPI.getStatGroupBy(search).success(function(data,status,headers,config){angular.isArray(data)&&data.length>0&&angular.forEach(data,function(value){$scope.stats[config.data.listOwners[0]][value._id.code].avg=value.value});var searchSum=angular.copy(config.data);searchSum.aggregat="SUM",statAPI.getStatGroupBy(searchSum).success(function(data,status,headers,config){angular.isArray(data)&&data.length>0&&angular.forEach(data,function(value){$scope.stats[config.data.listOwners[0]][value._id.code].sum=value.value,"playtime"===value._id.code&&(playtimeCount=parseFloat(value.value))});var searchCount=angular.copy(config.data);searchCount.aggregat="COUNT",statAPI.getStatGroupBy(searchCount).success(function(data,status,headers,config){angular.isArray(data)&&data.length>0&&(angular.forEach(data,function(value){$scope.stats[config.data.listOwners[0]][value._id.code].count=value.value,$scope.stats[config.data.listOwners[0]][value._id.code].freq=playtimeCount/value.value}),$scope.goals.datasets[config.data.serie]=[$scope.stats[config.data.listOwners[0]].goalscored.sum],$scope.playtime.datasets[config.data.serie]=[$scope.stats[config.data.listOwners[0]].playtime.sum]);var searchAttendance=angular.copy(config.data);searchAttendance.listIndicators=["attendance"],searchAttendance.aggregat="AVG",searchAttendance.value=$filter("translate")("stat.attendance.val"),statAPI.getStatGroupBy(searchAttendance).success(function(data,status,headers,config){angular.isArray(data)&&data.length>0&&(angular.forEach(data,function(value){$scope.stats[config.data.listOwners[0]][value._id.code].avg=value.value}),$scope.attendance.datasets[config.data.serie]=[parseFloat($filter("number")(100*$scope.stats[config.data.listOwners[0]].attendance.avg,2))])})})})}),serie++})}]).controller("AddPlayerCtrl",["$log","labelsAPI","$rootScope","structureCfgRestAPI","$scope","$location","$filter","locationAPI","activityCfgRestAPI","$translatePartialLoader","statAPI","personRestAPI","effectiveRestAPI","eventbus","user","meta",function($log,labelsAPI,$rootScope,structureCfgRestAPI,$scope,$location,$filter,locationAPI,activityCfgRestAPI,$translatePartialLoader,statAPI,personRestAPI,effectiveRestAPI,eventbus,user,meta){function addPerson(){var dataContainer={person:$scope.newPlayer,countryId:meta.structure.country._id,activityId:meta.activity.code};personRestAPI.addPerson(dataContainer).success(function(person){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,person.listLicenses[0].listHistoLicense[0].categoryAgeCode).success(function(effective){if(angular.isDefined(effective[0]))effective[0].members.push(person._id),effectiveRestAPI.update(effective[0]).success(function(data){var cat="";$scope.categories.forEach(function(c){c.code===person.listLicenses[0].listHistoLicense[0].categoryAgeCode&&(cat=c.label)}),toastr.success($filter("translate")("effective.addPlayer.success",{firstname:person.firstname,name:person.name,cat:cat})),$location.path("private/effective/dashboard/"+$scope.licence.categoryAgeCode+"/-1")});else{var cat="",category={};activityCfgRestAPI.getCategoriesAgeList(moment().valueOf(),meta.activity.code,meta.structure.country._id).success(function(ageCategories){ageCategories.forEach(function(c){c.code===person.listLicenses[0].listHistoLicense[0].categoryAgeCode&&(cat=c.label,category=c)});var newEffective={_id:null,structureId:$scope.meta.structure._id,seasonCode:$scope.meta.season.code,categoryAge:category,members:[person._id]};$log.log(newEffective),effectiveRestAPI.add(newEffective).success(function(data){toastr.success($filter("translate")("effective.addPlayer.success",{firstname:person.firstname,name:person.name,cat:cat})),$location.path("private/effective/dashboard/"+$scope.licence.categoryAgeCode+"/-1")})})}})})}$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("format"),$translatePartialLoader.addPart("data"),$translatePartialLoader.addPart("main"),$translatePartialLoader.addPart("stats"),$scope.$watch(function(){return $filter("translate")("effective.addPlayer.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.newPlayer={status:{squadnumber:0,availability:{value:"available",cause:"available"},weight:0,height:0,laterality:"right-footed",stateForm:"good"},address:{},contact:{}},$scope.licence={},$scope.birthcityFormatedAddress="",$scope.dateOption={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date},$scope.dateOption2={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date(2999,0,0,0,0,0)},$scope.dateOption3={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date(2999,0,0,0,0,0)},labelsAPI.getListe("countries").success(function(data){$scope.countriesList=data}),activityCfgRestAPI.getGenderList(moment().valueOf(),meta.season.code,meta.activity.code,meta.structure.country._id).success(function(data){$scope.genders=data}),$scope.translated=function(p){return $filter("translate")(p.label)},$scope.getBirthcity=function(){angular.isDefined($scope.newPlayer.birthcity)&&!$scope.newPlayer.birthcity.isBlank()&&locationAPI.get($scope.newPlayer.birthcity).then(function(adr){angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("locality")>0&&($scope.newPlayer.birthcity=item.long_name)})})},$scope.address={},$scope.refreshAddresses=function(address){var params={address:address,sensor:!1};return $http.get("http://maps.googleapis.com/maps/api/geocode/json",{params:params}).then(function(response){$scope.addresses=response.data.results})},$scope.getPostalAddress=function(){angular.isDefined($scope.newPlayer.address.formatedAddress)&&!$scope.newPlayer.address.formatedAddress.isBlank()&&locationAPI.get($scope.newPlayer.address.formatedAddress).then(function(adr){$scope.newPlayer.address.lat=adr.data.results[0].geometry.location.lat,$scope.newPlayer.address.lng=adr.data.results[0].geometry.location.lng,angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("street_number")>0&&($scope.newPlayer.address.place=item.long_name+" "),item.types.count("route")>0&&($scope.newPlayer.address.place+=item.long_name),item.types.count("locality")>0&&($scope.newPlayer.address.city=item.long_name),item.types.count("postal_code")>0&&($scope.newPlayer.address.zipcode=item.long_name),item.types.count("country")>0&&($scope.newPlayer.address.country=item.long_name)})})},$scope.upsertPlayer=function(){$scope.newPlayer.birthdate=$scope.dateOption.val,$scope.licence.dateInscription=$scope.dateOption2.val,$scope.licence.dateQualification=$scope.dateOption3.val,$scope.newPlayer.name=$scope.newPlayer.name.capitalize(!0),$scope.newPlayer.firstname=$scope.newPlayer.firstname.capitalize(!0),$scope.newPlayer.listLicenses=Array.create({numLicense:$scope.licencenumber,structureId:$scope.structure._id,listHistoLicense:Array.create($scope.licence)}),addPerson()},$scope.dateInscription=moment(moment().valueOf()).format($filter("translate")("date.format")),$scope.dateQualification=moment(moment().valueOf()).format($filter("translate")("date.format")),$scope.season=meta.season,$scope.activity=meta.activity,$scope.structure=meta.structure,$scope.licence.seasonCode=$scope.season.code,structureCfgRestAPI.getCategoriesAgeStrList(meta.season.code,meta.structure._id).success(function(data){$scope.categories=data});var search={activityId:meta.activity._id,countryId:meta.structure.country._id,listIndicators:["positionType","stateForm","laterality"]};statAPI.getIndicatorCfg(search).success(function(data){angular.isUndefined(data)||null===data||data.forEach(function(d){$scope[d.code]=d.listValues})}),activityCfgRestAPI.getLicenseTypeList(moment().valueOf(),meta.season.code,meta.activity.code,meta.structure.country._id).success(function(data){$scope.typeLicences=data}),$scope.getLocation=function(val){return locationAPI.get(val).then(function(res){var addresses=Array.create();return angular.forEach(res.data.results,function(item){addresses.push(item.formatted_address)}),addresses})}}]),angular.module("groupSheetMod",["labelsAPI","structureCfgRestAPI","effectiveRestAPI","personRestAPI","userMetaAPI","groupAPI","labelsAPI","ui.utils","activityCfgRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/groupSheet/add/:categoryAgeCode",{controller:"GroupSheetCtrlAdd",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/group/groupSheet.html"}).when("/private/groupSheet/:id",{controller:"GroupSheetCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/group/groupSheet.html"})}]).controller("GroupSheetCtrlAdd",["$log","$window","$scope","$routeParams","BoardService","$route","$rootScope","$modal","structureCfgRestAPI","activityCfgRestAPI","personRestAPI","effectiveRestAPI","eventbus","groupAPI","$q","$filter","$location","$translatePartialLoader","user","meta","$q",function($log,$window,$scope,$routeParams,BoardService,$route,$rootScope,$modal,structureCfgRestAPI,activityCfgRestAPI,personRestAPI,effectiveRestAPI,eventbus,groupAPI,$q,$filter,$location,$translatePartialLoader,user,meta,$q){function getLevelGameList(){activityCfgRestAPI.getLevelGameList(moment().valueOf(),meta.activity.code,meta.structure.country._id).success(function(gameLevels){$scope.gameLevels=gameLevels,getCategory(categoryAgeCode)})}function getCategory(categoryAgeCode){activityCfgRestAPI.getCategoryAge(moment().valueOf(),meta.activity.code,meta.structure.country._id,categoryAgeCode).success(function(data){$scope.category=data,$scope.currentGroup.categoryAge=data,getAllMemberGroups(categoryAgeCode)})}function getAllMemberGroups(category){$scope.listMemberIdAnotherGroup=[],groupAPI.getActiveGroupsCategory($scope.meta.structure._id,category).success(function(groups){null!==groups&&(groups.forEach(function(g){$scope.listMemberIdAnotherGroup.add(g.members)}),getEffectiveCategory())})}function getEffectiveCategory(){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,$scope.category.code).success(function(data){var listId=[];data.forEach(function(a){listId=a.members,$scope.listMemberIdAnotherGroup.forEach(function(b){listId.remove(b)})});var listField=new Array("_id","name","firstname","avatar","status");personRestAPI.getListPerson(listId,listField).success(function(data){data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType=""}),generateGroups(data)})})}function generateGroups(data){$scope.groups=[];var groupAll={startDate:moment().valueOf(),endDate:"7258028400000",label:$scope.category.label,categoryAge:null,levelGame:null,members:null};groupAll.persons=data,$scope.groups.push(groupAll),$scope.groups.push($scope.currentGroup),generateView()}function generateView(){var boardData=Board("Group management",$scope.groups.length),columnsGroups=[],columnName=$filter("translate")("group.form.columName");$scope.groups.forEach(function(e){var column=null;if(column=new Column(""===e.label?columnName:e.label),column.cards=[],angular.isDefined(e.persons))e.persons.forEach(function(m){var card=new Card(m._id,m.firstname,m.name,m.positionType,m.avatar);column.cards.push(card)});else{var label=$filter("translate")("group.form.defaultCard"),card=new Card("BIDON",label,"","","");column.cards.push(card)}columnsGroups.push(column)}),boardData.columns=columnsGroups,$scope.groupBoard=BoardService.groupBoard(boardData),$scope.groupSortOptions={itemMoved:function(event){event.source.itemScope.modelValue.status=event.dest.sortableScope.$parent.column.name;var card=event.dest.sortableScope.modelValue[event.dest.index];event.dest.sortableScope.$parent.column.name===columnName?("BIDON"===event.dest.sortableScope.modelValue[0].personId&&$scope.removeCard(event.dest.sortableScope.column,event.dest.sortableScope.modelValue[0]),$scope.currentGroup.members.push(card.personId)):$scope.currentGroup.members.remove(card.personId)},orderChanged:function(event){},containment:"#board"}}$route.current;$scope.user=user,$scope.meta=meta,$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("group"),$scope.$watch(function(){return $filter("translate")("group.dashboard.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.doTheBack=function(){$window.history.back()};var categoryAgeCode=$routeParams.categoryAgeCode;$scope.groups=[],$scope.listMemberIdAnotherGroup=[],$scope.gameLevels=[],$scope.effective=[],$scope.currentGroup={startDate:moment().valueOf(),endDate:"7258028400000",label:"",categoryAge:null,levelGame:null,structureId:$scope.meta.structure._id,members:[]},getLevelGameList(),$scope.removeCard=function(column,card){BoardService.removeCard($scope.groupBoard,column,card)},$scope.addNewCard=function(column){BoardService.addNewCard($scope.groupBoard,column)},$scope.addGroup=function(){groupAPI.addGroup($scope.currentGroup).success(function(data){$scope.currentGroup=data,$window.history.back()})},$scope.cancel=function(){$window.history.back()}}]).controller("GroupSheetCtrl",["$log","$window","$scope","$routeParams","BoardService","$route","$rootScope","$modal","structureCfgRestAPI","activityCfgRestAPI","personRestAPI","effectiveRestAPI","eventbus","groupAPI","$q","$filter","$location","$translatePartialLoader","user","meta","$q",function($log,$window,$scope,$routeParams,BoardService,$route,$rootScope,$modal,structureCfgRestAPI,activityCfgRestAPI,personRestAPI,effectiveRestAPI,eventbus,groupAPI,$q,$filter,$location,$translatePartialLoader,user,meta,$q){function getLevelGameList(){activityCfgRestAPI.getLevelGameList(moment().valueOf(),meta.activity.code,meta.structure.country._id).success(function(gameLevels){$scope.gameLevels=gameLevels,retrieveGroup()})}function retrieveGroup(){groupAPI.getGroup(idGroup).success(function(group){$scope.currentGroup=group,getAllGroups($scope.currentGroup.categoryAge.code),$scope.gameLevels.forEach(function(g){g.code===$scope.currentGroup.levelGame.code&&($scope.currentGroup.LevelGame=g,$log.log($scope.currentGroup.LevelGame==g))})})}function getAllGroups(category){$scope.groups=[],groupAPI.getActiveGroupsCategory($scope.meta.structure._id,category).success(function(groups){var listId=[];if(null!==groups){groups.forEach(function(g){listId.add(g.members),$scope.groups.push(g)});var listField=new Array("_id","name","firstname","avatar","status");personRestAPI.getListPerson(listId,listField).success(function(data){var userById={};data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType="",e.birthdate=$filter("date")(e.birthdate,"yyyy"),e.age=moment().format("YYYY")-e.birthdate,e.weight=e.status.weight,e.height=e.status.height,userById[e._id]=e}),$scope.groups.forEach(function(g){g.persons=[],g.members.forEach(function(m){this.push(userById[m])},g.persons)}),generateView()})}})}function generateView(){var boardData=Board("Group management",$scope.groups.length),columnsGroups=[];$scope.groups.forEach(function(e){var column=new Column(e.label);column.cards=[],e.persons.forEach(function(m){var card=new Card(m._id,m.firstname,m.name,m.positionType,m.avatar);column.cards.push(card)}),columnsGroups.push(column)}),boardData.columns=columnsGroups,$scope.groupBoard=BoardService.groupBoard(boardData),$scope.groupSortOptions={itemMoved:function(event){$log.log(event),$log.log(event.source.itemScope.modelValue.status),$log.log(event.dest.sortableScope.$parent.column.name),event.source.itemScope.modelValue.status=event.dest.sortableScope.$parent.column.name},orderChanged:function(event){},containment:"#board"}}var idGroup=$routeParams.id;$scope.currentGroup=null;$route.current;$scope.user=user,$scope.meta=meta,$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("group"),$scope.$watch(function(){return $filter("translate")("group.dashboard.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.doTheBack=function(){$window.history.back()},$scope.groups=[],$scope.gameLevels=[],getLevelGameList(),$scope.removeCard=function(column,card){BoardService.removeCard($scope.groupBoard,column,card)},$scope.addNewCard=function(column){BoardService.addNewCard($scope.groupBoard,column)},$scope.updateGroup=function(){$log.log($scope.currentGroup),groupAPI.addGroup($scope.currentGroup).success(function(data){$scope.currentGroup=data,$window.history.back()})},$scope.cancel=function(){$window.history.back()}}]).service("BoardService",["$modal","BoardManipulator",function($modal,BoardManipulator){return{removeCard:function(board,column,card){BoardManipulator.removeCardFromColumn(board,column,card)},addNewCard:function(board,column){var modalInstance=$modal.open({templateUrl:"views/partials/newCard.html",controller:"NewCardController",backdrop:"static",resolve:{column:function(){return column}}});modalInstance.result.then(function(cardDetails){cardDetails&&BoardManipulator.addCardToColumn(board,cardDetails.column,cardDetails.title,cardDetails.details)})},groupBoard:function(board){var groupBoard=new Board(board.name,board.numberOfColumns);return angular.forEach(board.columns,function(column){BoardManipulator.addColumn(groupBoard,column.name),angular.forEach(column.cards,function(card){BoardManipulator.addCardToColumn(groupBoard,column,card)})}),groupBoard}}}]).factory("BoardManipulator",function(){return{addColumn:function(board,columnName){board.columns.push(new Column(columnName))},addCardToColumn:function(board,column,card){angular.forEach(board.columns,function(col){col.name===column.name&&col.cards.push(card)})},removeCardFromColumn:function(board,column,card){angular.forEach(board.columns,function(col){col.name===column.name&&col.cards.splice(col.cards.indexOf(card),1)})},addBacklog:function(board,backlogName){board.backlogs.push(new Backlog(backlogName))},addPhaseToBacklog:function(board,backlogName,phase){angular.forEach(board.backlogs,function(backlog){backlog.name===backlogName&&backlog.phases.push(new Phase(phase.name))})},addCardToBacklog:function(board,backlogName,phaseName,task){angular.forEach(board.backlogs,function(backlog){backlog.name===backlogName&&angular.forEach(backlog.phases,function(phase){phase.name===phaseName&&phase.cards.push(new Card(task.title,task.status,task.details))})})}}}),angular.module("groupMod",["labelsAPI","effectiveRestAPI","personRestAPI","userMetaAPI","groupAPI","labelsAPI","ui.utils","activityCfgRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/group/:categoryAgeCode",{controller:"GroupDashboardCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/group/groupDashboard.html"})}]).controller("GroupDashboardCtrl",["$log","$window","$scope","$route","$routeParams","$rootScope","$modal","activityCfgRestAPI","personRestAPI","effectiveRestAPI","eventbus","groupAPI","$q","$filter","$location","$translatePartialLoader","user","meta",function($log,$window,$scope,$route,$routeParams,$rootScope,$modal,activityCfgRestAPI,personRestAPI,effectiveRestAPI,eventbus,groupAPI,$q,$filter,$location,$translatePartialLoader,user,meta){function getLevelGameList(){activityCfgRestAPI.getLevelGameList(moment().valueOf(),meta.activity.code,meta.structure.country._id).success(function(data){$scope.gameLevels=data})}function getAllGroups(category){$scope.groups=[],groupAPI.getActiveGroupsCategory($scope.meta.structure._id,category).success(function(data){data.forEach(function(a){$scope.groupsEmpty=!1,a.listMember=[];var listId=[];listId=a.members;var listField=new Array("_id","name","firstname","avatar","status");personRestAPI.getListPerson(listId,listField).success(function(data){data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType="",e.birthdate=$filter("date")(e.birthdate,"yyyy"),e.age=moment().format("YYYY")-e.birthdate,e.weight=e.status.weight,e.height=e.status.height,a.listMember.push(e)})}),$scope.groups.push(a)})})}function getCategory(categoryAgeCode){activityCfgRestAPI.getCategoryAge(moment().valueOf(),meta.activity.code,meta.structure.country._id,categoryAgeCode).success(function(data){$scope.category=data})}var categoryAgeCode=($route.current,$routeParams.categoryAgeCode);$scope.user=user,$scope.meta=meta,$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("group"),$scope.$watch(function(){return $filter("translate")("group.dashboard.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.doTheBack=function(){$window.history.back()},$scope.groupsEmpty=!0,$scope.category={},$scope.groups=[],$scope.gameLevels=[],getLevelGameList(),getCategory(categoryAgeCode),getAllGroups(categoryAgeCode)}]),angular.module("playersheet",["statWidget","labelsAPI","noteAPI","personRestAPI","structureCfgRestAPI","statAPI","chart.js","structureAPI","summarySheetModal","seasonsAPI","activityCfgRestAPI","userMetaAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/playersheet/:id",{controller:"PlayerSheetCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/playersheet.html"})}]).controller("PlayerSheetCtrl",["$scope","$log","eventbus","personRestAPI","statAPI","locationAPI","labelsAPI","userMetaAPI","$q","$window","$translatePartialLoader","$location","$rootScope","noteAPI","$filter","FileUploader","$http","structureCfgRestAPI","structureAPI","$modal","seasonsAPI","$routeParams","user","meta",function($scope,$log,eventbus,personRestAPI,statAPI,locationAPI,labelsAPI,userMetaAPI,$q,$window,$translatePartialLoader,$location,$rootScope,noteAPI,$filter,FileUploader,$http,structureCfgRestAPI,structureAPI,$modal,seasonsAPI,$routeParams,user,meta){"use strict";function buildRadars(){$scope.technicalRadar={datasets:[[]],series:[$filter("translate")("playerSheet.rubrics.technical.title")],labels:[]},$scope.physicalRadar={datasets:[[]],series:[$filter("translate")("playerSheet.rubrics.physical.title")],labels:[]},$scope.mentalRadar={datasets:[[]],series:[$filter("translate")("playerSheet.rubrics.mental.title")],labels:[]};var labels=[],datasets=[];labels.push($filter("translate")("playerSheet.rubrics.technical.title"));var score=0;$scope.person.technicalFolder.forEach(function(a){score+=a.value,$scope.technicalRadar.labels.push($filter("translate")("playerSheet.rubrics.technical.label."+a.key)),$scope.technicalRadar.datasets[0].push(a.value)}),$scope.person.technicalFolder.length>0?datasets.push(100*score/(5*$scope.person.technicalFolder.length)):datasets.push(0),labels.push($filter("translate")("playerSheet.rubrics.physical.title")),score=0,$scope.person.physicalFolder.forEach(function(a){score+=a.value,$scope.physicalRadar.labels.push($filter("translate")("playerSheet.rubrics.physical.label."+a.key)),$scope.physicalRadar.datasets[0].push(a.value)}),$scope.person.physicalFolder.length>0?datasets.push(100*score/(5*$scope.person.physicalFolder.length)):datasets.push(0),labels.push($filter("translate")("playerSheet.rubrics.mental.title")),score=0,$scope.person.mentalFolder.forEach(function(a){score+=a.value,$scope.mentalRadar.labels.push($filter("translate")("playerSheet.rubrics.mental.label."+a.key)),$scope.mentalRadar.datasets[0].push(a.value)}),$scope.person.mentalFolder.length>0?datasets.push(100*score/(5*$scope.person.mentalFolder.length)):datasets.push(0),$scope.myChart.data={labels:labels,datasets:datasets,series:[$scope.person.firstname+" "+$scope.person.name]}}function initPerson(data){$scope.person=data,$scope.person.available=!0,$scope.person.isGoal=!1,$scope.person.age=dateDiff($scope.person.birthdate),"unavailable"===$scope.person.status.availability.value&&($scope.person.available=!1),"goalkeeper"===$scope.person.status.positionType&&($scope.person.isGoal=!0),initHistoLicences(),angular.isDefined($scope.person.birthcountry)&&($scope.person.birthcountryF=$filter("translate")($scope.person.birthcountry.label))}function initHistoLicences(){userMetaAPI.getSeasonsInfo($scope.activity._id,$scope.structure._id).success(function(data){var seasons=[];angular.forEach(data,function(value){this[value.code]=value},seasons),angular.forEach($scope.person.listLicenses,function(licence){angular.isDefined(licence.structure)&&getStructure(licence),angular.forEach(licence.listHistoLicense,function(histoLicense){histoLicense.seasonCode===$scope.season.code&&($scope.person.currentLicence=histoLicense,$scope.person.currentLicence.numLicense=licence.numLicense),angular.isDefined(histoLicense.categoryAgeCode)&&angular.isDefined($scope.categories)&&(histoLicense.season=seasons[histoLicense.seasonCode],angular.forEach($scope.categories,function(category){histoLicense.categoryAgeCode===category.code&&(histoLicense.category=category)}))})})})}function getStructure(licence){return structureAPI.get(licence.idStructure).success(function(data){licence.structure=data})}var idPerson=$routeParams.id;$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("data"),$translatePartialLoader.addPart("main"),$scope.person={available:!0,isGoal:!1},$scope.flipped=!1,$scope.toggle=function(){$scope.flipped=!$scope.flipped};var personProm=$q.defer();$scope.personProm=personProm.promise,$scope.ownersId=$q.defer(),$scope.ownersId.resolve([idPerson]),$scope.widget=[{type:"Line",color:"muted",stat:"attendance",prom:$scope.ownersId.promise,aggregat:"AVG",listFieldsGroupBy:["code","timer"]}],$scope.myChart={options:{scaleLineColor:"#fff",scaleFontSize:10,scaleFontColor:"#fff",tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutQuart",pointLabelFontSize:0},data:{labels:[],series:[],datasets:[]}},$scope.attendance={options:{scaleLineColor:"#fff",scaleFontSize:10,scaleFontColor:"#fff",tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutQuart",percentageInnerCutout:85,legendTemplate:""},data:{labels:[],series:[],datasets:[[]]}},$scope.doTheBack=function(){$window.history.back()},$scope.flipFront=function(){$scope.flipped=!1},$scope.flipBack=function(){$scope.flipped=!0},$scope.stats={},$scope.user=user,$scope.meta=meta,$scope.season=meta.season,$scope.activity=meta.activity,$scope.structure=meta.structure,structureCfgRestAPI.getCategoriesAgeStrList(meta.season.code,meta.structure._id).success(function(data){$scope.categories=data}),personRestAPI.getPerson(idPerson).success(function(data){personProm.resolve(data),eventbus.prepForBroadcast("title",data.firstname+" "+data.name),initPerson(data),$scope.ownersId=Array.create(idPerson),$scope.fetchPersonStats(),buildRadars();var search={activityId:meta.activity._id,countryId:meta.structure.country._id,listIndicators:["stateForm","positionType"]
};statAPI.getIndicatorCfg(search).success(function(data){angular.isUndefined(data)||null===data||data.forEach(function(d){$scope[d.code]=d.listValues})})});var indicators=Array.create("playtime","goalscored","goalconceded","holder","substitue","redCard","yellowCard");angular.forEach(indicators,function(value){$scope.stats[value]={sum:0,avg:0,count:0,freq:0}}),$scope.openUnavailableModal=function(clickEvent){clickEvent.stopPropagation(),clickEvent.currentTarget.checked=$scope.person.available,clickEvent.preventDefault(),$modal.open({templateUrl:"templates/prive/organization/effective/playerAvailabilityModal.html",controller:"PlayerAvailabilityModalCtrl",size:"sm",resolve:{person:function(){return $scope.person},meta:function(){return $scope.meta}}}).result.then(function(){$scope.funcSubmitUpdateState()},function(){})},$scope.fetchPersonStats=function(){var playtimeCount=1,search={listIndicators:indicators,listOwners:$scope.ownersId,startDate:$scope.season.startDate,endDate:$scope.season.endDate,aggregat:"AVG",listFieldsGroupBy:["code"]};statAPI.getStatGroupBy(search).success(function(data){angular.isArray(data)&&data.length>0&&angular.forEach(data,function(value){$scope.stats[value._id.code].avg=value.value})});var searchSum=angular.copy(search);searchSum.aggregat="SUM",statAPI.getStatGroupBy(searchSum).success(function(data){angular.isArray(data)&&data.length>0&&angular.forEach(data,function(value){$scope.stats[value._id.code].sum=value.value,"playtime"===value._id.code&&(playtimeCount=value.value)});var searchCount=angular.copy(search);searchCount.aggregat="COUNT",statAPI.getStatGroupBy(searchCount).success(function(data){angular.isArray(data)&&data.length>0&&angular.forEach(data,function(value){$scope.stats[value._id.code].count=value.value,$scope.stats[value._id.code].freq=playtimeCount/value.value})})});var searchAttendance=angular.copy(search);searchAttendance.listIndicators=["attendance"],searchAttendance.aggregat="AVG",searchAttendance.value=$filter("translate")("stat.attendance.val"),statAPI.getStatGroupBy(searchAttendance).success(function(data){if(angular.isArray(data)&&data.length>0){var labels=[],datasets=[];labels.push($filter("translate")("stat.attendance.value.present")),labels.push($filter("translate")("stat.attendance.value.absent")),datasets.push(parseInt($filter("number")(100*data[0].value,2))),datasets.push(parseInt($filter("number")(100*(1-data[0].value),2))),$scope.attendance.data={labels:labels,datasets:datasets}}})},$scope.openPlayerSheetModal=function(){$modal.open({templateUrl:"templates/prive/organization/effective/playerPersonalInfoModal.html",controller:"PlayerPersonalInfoModalCtrl",size:"lg",resolve:{person:function(){return $scope.person},meta:function(){return $scope.meta}}}).result.then(function(person){$scope.person=person,$scope.funcSubmitUpdateState()},function(){})},$scope.showSummarySheet=function(){$modal.open({templateUrl:"templates/prive/organization/effective/summarySheetModal.html",controller:"summarySheetModalCtrl",backdrop:"true",scope:$scope,size:"md"})},$scope.showMap=function(){$modal.open({templateUrl:"templates/mapModal.html",controller:"MapModalInstanceCtrl",size:"lg",resolve:{person:function(){return $scope.person}}})},$scope.isAfficherNotes=!1,$scope.funcUpdateNotes=function(note,rubric){note.initial=note.content,$scope.isModifierNotes=!0,rubric&&(rubric.isModifierNoteRubric=!rubric.isModifierNoteRubric,$scope.focusElem("rubric-"+rubric.code+"-note"))},$scope.funcCancelUpdateNotes=function(note,rubric){$scope.isModifierNotes=!1,note.content=note.initial,rubric&&(rubric.isModifierNoteRubric=!1)},$scope.funcSubmitUpdateNotes=function(note,rubric){delete note.initial,noteAPI.upsert(note).success(function(){rubric&&(rubric.isModifierNoteRubric=!1),$scope.isModifierNotes=!1})},$scope.toggleNotes=function(){$scope.isAfficherNotes=!$scope.isAfficherNotes},$scope.updateSkills=function(stat,skill){$log.debug(stat),personRestAPI.updateEffectiveFeature($scope.person._id,skill,stat.key,stat.value).success(function(){var statistic={code:stat.key,owner:$scope.person._id,producter:Array.create($scope.user._id),structureId:$scope.structure._id,activityId:$scope.activity._id,value:stat.value};statAPI.addStat(statistic).success(function(){toastr.success($filter("translate")("playerSheet.updated"),$filter("translate")("stat."+stat.key+".libelle")),buildRadars()})})},$scope.funcSubmitUpdateState=function(){angular.forEach($scope.person.listRubricSheet,function(value){angular.isDefined(value.note)&&(delete value.note,delete value.isModifierNoteRubric)});var personPOST=angular.copy($scope.person);if(angular.forEach($scope.person.listLicenses,function(listLicense){delete listLicense.structure,angular.forEach(listLicense.listHistoLicense,function(listHistoLicense){delete listHistoLicense.season,delete listHistoLicense.category})}),null!==personPOST.medicalFolder&&angular.isDefined(personPOST.medicalFolder.wounds)&&angular.forEach(personPOST.medicalFolder.wounds,function(wounds){angular.isDefined(wounds.idLocalityWound)&&angular.isObject(wounds.idLocalityWound)&&(wounds.idLocalityWound=wounds.idLocalityWound._id)}),personPOST.birthcountryF&&delete personPOST.birthcountryF,delete personPOST.birthyearF,delete personPOST.lefthanded,delete personPOST.position,delete personPOST.age,delete personPOST.datacompletude,delete personPOST.percent,delete personPOST.available,delete personPOST.isGoal,null!==$scope.person.address.formatedAddress&&""!==$scope.person.address.formatedAddress){var formatedAddress=$scope.person.address.formatedAddress;delete personPOST.address.formatedAddress,locationAPI.get(formatedAddress).then(function(adr){angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("street_number")>0&&(personPOST.address.place=item.long_name+" "),item.types.count("route")>0&&(personPOST.address.place+=item.long_name),item.types.count("locality")>0&&(personPOST.address.city=item.long_name),item.types.count("postal_code")>0&&(personPOST.address.zipcode=item.long_name),item.types.count("country")>0&&(personPOST.address.country=item.long_name)}),updatePerson(personPOST)})}else delete personPOST.address.formatedAddress,updatePerson(personPOST)};var updatePerson=function(personPOST){personRestAPI.updatePerson(personPOST).success(function(data){initPerson(data),toastr.success($filter("translate")("playerSheet.updated"))})};$scope.$watch("person.address",function(){$scope.person&&$scope.person.address&&updateFormatedAddress()});var updateFormatedAddress=function(){""===$scope.person.address.place||null===$scope.person.address.place||""===$scope.person.address.zipcode||null===$scope.person.address.zipcode||""===$scope.person.address.city||null===$scope.person.address.city||""===$scope.person.address.country||null===$scope.person.address.country?$scope.person.address.formatedAddress="":$scope.person.address.formatedAddress=$scope.person.address.place+", "+$scope.person.address.zipcode+" "+$scope.person.address.city+", "+$scope.person.address.country}}]).controller("MapModalInstanceCtrl",["$scope","$modalInstance","person",function($scope,$modalInstance,person){"use strict";$scope.person=person,$scope.loc={lat:40,lon:-73},$scope.markers={mainMarker:{zoom:12}},$scope.gotoLocation=function(lat,lon){($scope.lat!==lat||$scope.lon!==lon)&&($scope.loc={lat:lat,lon:lon},$scope.markers={mainMarker:{lat:lat,lng:lon,zoom:14},markers:{mainMarker:{focus:!0,message:$scope.person.address.formatedAddress,lat:lat,lng:lon}}})},$scope.geoCode=function(address){this.geocoder||(this.geocoder=new google.maps.Geocoder),this.geocoder.geocode({address:address},function(results,status){if(status===google.maps.GeocoderStatus.OK){var loc=results[0].geometry.location;$scope.search=results[0].formatted_address,$scope.gotoLocation(loc.lat(),loc.lng())}})},$scope.geoCode($scope.person.address.formatedAddress),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]).controller("PlayerAvailabilityModalCtrl",["$scope","$rootScope","$modalInstance","person","meta","statAPI","$log","$translatePartialLoader","$filter",function($scope,$rootScope,$modalInstance,person,meta,statAPI,$log,$translatePartialLoader,$filter){"use strict";$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("format"),$scope.person=person,$scope.reasons=[],$scope.initialValue=angular.copy($scope.person.status.availability),$scope.endDate=moment($scope.person.status.availability.endDate).format($filter("translate")("date.format")),$scope.dateOption={minDate:new Date(1999,0,1,1,0,1),maxDate:new Date(2999,0,1,1,0,1)},$scope.season=meta.season,$scope.activity=meta.activity,$scope.structure=meta.structure;var search={activityId:meta.activity._id,countryId:meta.structure.country._id,listIndicators:["unavailability"]};statAPI.getIndicatorCfg(search).success(function(data){if(!angular.isUndefined(data)&&null!==data){var indicator=data[0];indicator.listValues.forEach(function(a){$scope.reasons.push(a)})}}),$scope.updateState=function(){"available"===$scope.person.status.availability.cause?($scope.person.available=!0,$scope.person.status.availability.value="available",$scope.person.status.availability.endDate=moment().valueOf(),$scope.dateOption.val=$scope.person.status.availability.endDate,$scope.endDate=moment().format($filter("translate")("date.format"))):($scope.person.available=!1,$scope.person.status.availability.value="unavailable",angular.isDefined($scope.dateOption.val)&&($scope.person.status.availability.endDate=$scope.dateOption.val,$scope.endDate=moment($scope.person.status.availability.endDate).format($filter("translate")("date.format"))))},$scope.cancel=function(){$scope.person.status.availability=angular.copy($scope.initialValue),$modalInstance.dismiss("cancel")},$scope.ok=function(unavailableForm){unavailableForm.$valid&&($scope.updateState(),$modalInstance.close($scope.person.status.availability))},$scope.updateState()}]).controller("PlayerPersonalInfoModalCtrl",["$scope","$rootScope","$modalInstance","person","meta","labelsAPI","statAPI","locationAPI","activityCfgRestAPI","$log","$filter","$translatePartialLoader",function($scope,$rootScope,$modalInstance,person,meta,labelsAPI,statAPI,locationAPI,activityCfgRestAPI,$log,$filter,$translatePartialLoader){"use strict";$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("data"),$translatePartialLoader.addPart("main"),$scope.translated=function(p){return $filter("translate")(p.label)},person.status.squadnumber=parseInt(person.status.squadnumber),person.status.weight=parseInt(person.status.weight),person.status.height=parseInt(person.status.height),$scope.person=person,$scope.dateOption={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date},$scope.birthdate=moment($scope.person.birthdate).format($filter("translate")("date.format")),labelsAPI.getListe("countries").success(function(data){$scope.countriesList=data,angular.forEach($scope.countriesList,function(item){$scope.person.nationality._id===item._id&&($scope.person.nationality=item),$scope.person.birthcountry._id===item._id&&($scope.person.birthcountry=item)})}),activityCfgRestAPI.getGenderList(moment().valueOf(),meta.season.code,meta.activity.code,meta.structure.country._id).success(function(data){$scope.genders=data}),$scope.season=meta.season,$scope.activity=meta.activity,$scope.structure=meta.structure;var search={activityId:meta.activity._id,countryId:meta.structure.country._id,listIndicators:["positionType","laterality"]};statAPI.getIndicatorCfg(search).success(function(data){angular.isUndefined(data)||null===data||data.forEach(function(d){$scope[d.code]=d.listValues})}),$scope.ok=function(){angular.isDefined($scope.dateOption.val)&&($scope.person.birthdate=$scope.dateOption.val),$modalInstance.close($scope.person)},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.getLocation=function(val){return locationAPI.get(val).then(function(res){var addresses=Array.create();return angular.forEach(res.data.results,function(item){addresses.push(item.formatted_address)}),addresses})}}]),angular.module("effectiveSearch",["labelsAPI","structureCfgRestAPI","effectiveRestAPI","personRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","profileRestAPI","groupAPI","statAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/effective/search/:currentCategory/:currentGroup",{controller:"SimpleSearchPlayerCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/simpleSearch.html"}).when("/private/effective/advancedsearch/:currentCategory/:currentGroup",{controller:"AdvancedSearchPlayerCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/effective/advancedSearch.html"})}]).controller("SimpleSearchPlayerCtrl",["$log","$window","$route","$routeParams","$scope","$rootScope","$modal","$timeout","personRestAPI","eventbus","structureCfgRestAPI","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","user","meta",function($log,$window,$route,$routeParams,$scope,$rootScope,$modal,$timeout,personRestAPI,eventbus,structureCfgRestAPI,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,user,meta){var lastRoute=$route.current;$scope.$on("$locationChangeSuccess",function(){lastRoute.$$route.originalPath===$route.current.$$route.originalPath&&($route.current=lastRoute)}),$scope.currentCategoryId=$routeParams.currentCategory,$scope.currentGroupId=$routeParams.currentGroup,$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$scope.$watch(function(){return $filter("translate")("effective.simplesearch.title")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.categories=[],$scope.groups=[],$scope.effective=[],$scope.effectiveSave=[],$scope.selection=[];var effectiveprom=$q.defer();$scope.effectiveprom=effectiveprom.promise,$scope.meta=meta,structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,found=!0)})}),found||($scope.currentCategory=data[0])}),$scope.doTheBack=function(){$window.history.back()},$scope.$watch("currentCategory",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&($scope.groups=[],groupAPI.getActiveGroupsCategory($scope.meta.structure._id,newValue.code).success(function(data){$scope.groups.add({label:"Tous",_id:"-1"}),data.forEach(function(a){$scope.groups.push(a)});var found=!1;$scope.groups.forEach(function(g){g._id===$scope.currentGroupId&&($scope.currentGroup=g,found=!0)}),found||($scope.currentGroup=$scope.groups[0]),$scope.getEffective(),$location.url("/private/effective/search/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}))}),$scope.$watch("currentGroup",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&("-1"!==newValue._id?$scope.groups.forEach(function(a){if(a._id===newValue._id){var members=[];a.members.forEach(function(b){$scope.effectiveSave.forEach(function(c){b===c._id&&members.push(c)})}),effectiveprom.resolve(members),$scope.effective=members,$scope.tableEffectives.total(members.length),$scope.tableEffectives.reload(),$location.url("/private/effective/search/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}}):($scope.getEffective(),$location.url("/private/effective/search/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)))}),$scope.tableEffectives=new ngTableParams({page:1,count:25,filter:{},sorting:{name:"asc"}},{total:function(){return $scope.effective.length},counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")($scope.effective,params.orderBy()):$scope.effective;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count())),$timeout(function(){$.material.init()},500)}}),$scope.getEffective=function(){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,$scope.currentCategory.code).success(function(data){var listId=[];data.forEach(function(a){listId=a.members});var listField=new Array("_id","name","firstname","avatar","status");personRestAPI.getListPerson(listId,listField).success(function(data){effectiveprom.resolve(data),data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType="",e.birthdate=$filter("date")(e.birthdate,"yyyy"),e.age=moment().format("YYYY")-e.birthdate,e.weight=e.status.weight,e.height=e.status.height}),$scope.effective=data,$scope.effectiveSave=data,$scope.tableEffectives.total(data.length),$scope.tableEffectives.reload()})})},$scope.displayPlayerSheet=function(id){$location.path("/private/playersheet/"+id)},$scope.openCompareModal=function(){0===$scope.selection.length?toastr.warning($filter("translate")("effective.dashboard.selectionMin")):($scope.players=[],$scope.effective.forEach(function(p){$scope.selection.find(p._id)&&$scope.players.add(p)}),$modal.open({templateUrl:"templates/prive/organization/effective/playerCompareModal.html",controller:"PlayerCompareCtrl",size:"lg",resolve:{players:function(){return $scope.players},meta:function(){return $scope.meta}}}).result.then(function(){$scope.players=[],$scope.selection=[]},function(){$scope.players=[],$scope.selection=[]}))},$scope.toggleSelection=function(id){var idx=$scope.selection.indexOf(id);idx>-1?$scope.selection.splice(idx,1):3===$scope.selection.length?(angular.element("#check-"+id).attr("checked",!1),toastr.warning($filter("translate")("effective.dashboard.selectionLimit"))):$scope.selection.push(id)},$scope.showAdvancedSearch=function(){$location.path("/private/effective/advancedsearch/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}}]).controller("AdvancedSearchPlayerCtrl",["$log","$window","$route","$routeParams","$scope","$timeout","$rootScope","$modal","personRestAPI","eventbus","structureCfgRestAPI","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","user","meta",function($log,$window,$route,$routeParams,$scope,$timeout,$rootScope,$modal,personRestAPI,eventbus,structureCfgRestAPI,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,user,meta){var lastRoute=$route.current;$scope.$on("$locationChangeSuccess",function(){lastRoute.$$route.originalPath===$route.current.$$route.originalPath&&($route.current=lastRoute)}),$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("stats"),$scope.currentCategoryId=$routeParams.currentCategory,$scope.currentGroupId=$routeParams.currentGroup,$scope.$watch(function(){return $filter("translate")("effective.advancedsearch.title")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.categories=[],$scope.groups=[],$scope.effective=[],$scope.effectiveSave=[],$scope.selection=[],$scope.filters={birthdate:""};var effectiveprom=$q.defer();$scope.effectiveprom=effectiveprom.promise,$scope.meta=meta,structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,found=!0)})}),found||($scope.currentCategory=data[0])}),$scope.doTheBack=function(){$window.history.back()},$scope.tableEffectives=new ngTableParams({page:1,count:25,filter:{},sorting:{name:"asc"}},{total:function(){return $scope.effective.length},counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")($scope.effective,params.orderBy()):$scope.effective;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count())),$timeout(function(){$.material.init()},500)}}),$scope.getEffective=function(){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,$scope.currentCategory.code).success(function(data){var listId=[];data.forEach(function(a){listId=a.members});var listField=new Array("_id","name","firstname","avatar","status");personRestAPI.getListPerson(listId,listField).success(function(data){data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType="",e.birthdate=$filter("date")(e.birthdate,"yyyy"),e.age=moment().format("YYYY")-e.birthdate,e.weight=e.status.weight,e.height=e.status.height,angular.isDefined(e.status.laterality)?e.laterality=$filter("translate")("effective.advancedsearch.label."+e.status.laterality):e.laterality=""}),$scope.effective=data,$scope.effectiveSave=data,effectiveprom.resolve(data),$scope.tableEffectives.total(data.length),$scope.tableEffectives.reload()})})},$scope.$watch("currentCategory",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&($scope.groups=[],groupAPI.getActiveGroupsCategory($scope.meta.structure._id,newValue.code).success(function(data){$scope.groups.add({label:"Tous",_id:"-1"}),data.forEach(function(a){$scope.groups.push(a)});var found=!1;$scope.groups.forEach(function(g){g._id===$scope.currentGroupId&&($scope.currentGroup=g,found=!0)}),found||($scope.currentGroup=$scope.groups[0]),$scope.getEffective(),$location.url("/private/effective/advancedsearch/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}))}),$scope.$watch("currentGroup",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&("-1"!==newValue._id?$scope.groups.forEach(function(a){if(a._id===newValue._id){var members=[];a.members.forEach(function(b){$scope.effectiveSave.forEach(function(c){b===c._id&&members.push(c)})}),effectiveprom.resolve(members),$scope.effective=members,$scope.tableEffectives.total(members.length),$scope.tableEffectives.reload(),$location.url("/private/effective/advancedsearch/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}}):($scope.getEffective(),$location.url("/private/effective/advancedsearch/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)))}),$scope.displayPlayerSheet=function(id){$location.path("/private/playersheet/"+id)},$scope.openCompareModal=function(){0===$scope.selection.length?toastr.warning($filter("translate")("effective.dashboard.selectionMin")):($scope.players=[],$scope.effective.forEach(function(p){$scope.selection.find(p._id)&&$scope.players.add(p)}),$modal.open({templateUrl:"templates/prive/organization/effective/playerCompareModal.html",controller:"PlayerCompareCtrl",size:"lg",resolve:{players:function(){return $scope.players},meta:function(){return $scope.meta}}}).result.then(function(){$scope.players=[],$scope.selection=[]},function(){$scope.players=[],$scope.selection=[]}))},$scope.toggleSelection=function(id){var idx=$scope.selection.indexOf(id);idx>-1?$scope.selection.splice(idx,1):3===$scope.selection.length?(angular.element("#check-"+id).attr("checked",!1),toastr.warning($filter("translate")("effective.dashboard.selectionLimit"))):$scope.selection.push(id)},$scope.showSimpleSearch=function(){$location.path("/private/effective/search/"+$scope.currentCategory.code+"/"+$scope.currentGroup._id)}}]);var organizationMod=angular.module("organizationMod",["structureAgeCategoriesMod","structureTeamsMod","categoryTeamsMod","structureCfgRestAPI"]);organizationMod.config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){$routeProvider.when("/private/organization",{controller:"organizationCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/organization.html"})}]),organizationMod.controller("organizationCtrl",["$log","$scope","$filter","structureCfgRestAPI","user","meta",function($log,$scope,$filter,structureCfgRestAPI,user,meta){$scope.meta=meta,structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data}),structureCfgRestAPI.getTeamsStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.teams=data})}]);var structureAgeCategoriesMod=angular.module("structureAgeCategoriesMod",["structureCfgRestAPI","activityCfgRestAPI","ngTable","ngTableExport","personRestAPI"]);structureAgeCategoriesMod.config(["$routeProvider",function($routeProvider){$routeProvider.when("/private/structureAgeCategoriesMod",{controller:"structureAgeCategegoriesCtrl",templateUrl:"templates/prive/organization/structure/structureAgeCategories.html"})}]),structureAgeCategoriesMod.controller("structureAgeCategegoriesCtrl",["$log","$scope","$rootScope","$filter","structureCfgRestAPI","personRestAPI","$sce","ngTableParams","$modal",function($log,$scope,$rootScope,$filter,structureCfgRestAPI,personRestAPI,$sce,ngTableParams,$modal){function initialisationStructure(){$scope.categories=[],ageCatStaffMember={},ageCatStr={},$scope.selectedCategory=null,$scope.categoryData=null,$scope.selectedStaffMember=null,$scope.staffMemberData=null,$scope.categoryLabel=null,$scope.ageMin=null,$scope.catCode=null,$scope.ageMax=null,$scope.gender=null,$scope.order=null,$scope.staffMemberId=null,$scope.staffMemberRole=null,$scope.staffMemberRoleCode=null,getCategoriesAgeStrList()}function getCategoriesAgeStrList(){$log.debug("structureAgeCategegoriesCtrl.getCategoriesAgeStrList()"),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(categories){var data=[];if(data=categories,data.length>0)for(var i=0;i<data.length;i++){ageCatStr=data[i];for(var j=0;j<ageCatStr.listStaffMember.length;j++)ageCatStaffMember=ageCatStr.listStaffMember[j],null!==ageCatStaffMember.personId&&getPersonById(ageCatStaffMember)}$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{label:"asc"}},{total:data.length,counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")(data,params.orderBy()):data;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}})})}function getPersonById(staffMember){$log.debug("structureAgeCategegoriesCtrl.getPersonById()"),personRestAPI.getPerson(staffMember.personId).success(function(person){staffMember.person=person})}$scope.addCategory=function(){$modal.open({templateUrl:"templates/prive/organization/structure/addAgeCategoriesModal.html",controller:"addAgeCategoriesModalCtrl",backdrop:"true",scope:$scope,size:"lg"})},$scope.addStaff=function(){$modal.open({templateUrl:"templates/prive/organization/structure/addStaffModal.html",controller:"addStaffModalCtrl",backdrop:"true",scope:$scope,size:"lg"})},$scope.getSelectedCategory=function(selectedCategory,categoryData){$scope.selectedCategory=selectedCategory,$scope.categoryData=categoryData,$scope.selectedStaffMember=null,$scope.categoryLabel=categoryData.label,$scope.ageMin=categoryData.ageMin,$scope.catCode=categoryData.code,$scope.ageMax=categoryData.ageMax,$scope.gender=categoryData.genre,$scope.order=categoryData.order,$log.debug(categoryData),$log.debug($scope.selectedCategory),$log.debug($scope.selectedStaffMember)},$scope.getSelectedCategoryStaff=function(selectedCategory,categoryLabel,selectedStaffMember,staffMemberData){$scope.selectedCategory=selectedCategory,$scope.categoryLabel=categoryLabel,$scope.selectedStaffMember=selectedStaffMember,$scope.staffMemberData=staffMemberData,$scope.staffMemberId=staffMemberData.personId,$scope.staffMemberRole=staffMemberData.role.label,$scope.staffMemberRoleCode=staffMemberData.role.code,$log.debug(staffMemberData),$log.debug($scope.selectedCategory),$log.debug($scope.selectedStaffMember,$scope.categoryLabel)},initialisationStructure()}]),structureAgeCategoriesMod.controller("addAgeCategoriesModalCtrl",["$scope","$log","$modalInstance","$rootScope","activityCfgRestAPI","$modal","$filter","$http","structureCfgRestAPI","personRestAPI","ngTableParams",function($scope,$log,$modalInstance,$rootScope,activityCfgRestAPI,$modal,$filter,$http,structureCfgRestAPI,personRestAPI,ngTableParams){function initialisationCategories(){$scope.categorySelected={},$scope.selection=[],$scope.selectedAgeCategory=[],$scope.ageCategoryData=[],structure=$scope.meta.structure,structureCodeActivity=structure.codeActivity,structureCountry=structure.addressStr.country,countryCode="CNTR-250-FR-FRA",d=new Date,date=d.getTime(),$scope.steps=["one","two"],$scope.step=0,$scope.inBack=!1,$scope.myForm={},$scope.myForm.$invalid=!1,$scope.personId=[],$scope.choosenRole=null,$scope.len=0,getCategoriesAgeList()}function getCategoriesAgeList(){$log.debug("addAgeCategoriesModalCtrl.getCategoriesAgeList()"),activityCfgRestAPI.getCategoriesAgeList(date,structureCodeActivity,countryCode).success(function(ageCategories){var data=[];data=ageCategories,$log.debug(data),$scope.tableParams2=new ngTableParams({page:1,count:5,sorting:{label:"asc"}},{total:data.length,counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")(data,params.orderBy()):data;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}})})}function getListPersonStructure(){var seasonCode=$scope.meta.season.code,structureId=$scope.meta.structure._id;personRestAPI.getListPersonStructure(seasonCode,structureId).success(function(person){var data=[];data=person,$log.debug(person),$scope.len=data.length,$scope.tableParams3=new ngTableParams({page:1,count:5,sorting:{name:"asc"}},{total:data.length,counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")(data,params.orderBy()):data;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}})})}var inBackState=!1;$scope.isFirstStep=function(){return 0===$scope.step},$scope.isLastStep=function(){return $scope.step===$scope.steps.length-1},$scope.getCurrentStep=function(){return $scope.steps[$scope.step]},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.handlePrevious=function(){inBackState=!0,console.log("in back ",inBackState),$scope.step-=$scope.isFirstStep()?0:1},$scope.handleNext=function(dismiss){$scope.myForm.$invalid?(alert("You have invalidated the form. Please fix."),inBackState=!1):$scope.isLastStep()||($scope.step+=1,getListPersonStructure())},$scope.getSelectedAgeCategory=function(selectedAgeCategory,ageCategoryData){$scope.selectedAgeCategory=selectedAgeCategory,$scope.ageCategoryData=ageCategoryData,$log.debug($scope.selectedAgeCategory),$log.debug($scope.ageCategoryData)},$scope.selectedPers=function(pers){pers.selected||($scope.personId=pers,$log.debug($scope.personId))},$scope.personSelected={};var i;for(i=0;i<$scope.len;i++)console.log($scope.personSelected[i]);$scope.selectRole=function(role){$scope.choosenRole=role,$log.debug(role)},$scope.add=function(){null!==$scope.personId&&null!==$scope.choosenRole?($log.debug($scope.personId),$log.debug($scope.choosenRole),$modalInstance.dismiss("cancel")):alert("Select person and/or role!")},initialisationCategories()}]),structureAgeCategoriesMod.controller("addStaffModalCtrl",["$scope","$log","$modalInstance","$rootScope","personRestAPI","$modal","$filter","$http","ngTableParams",function($scope,$log,$modalInstance,$rootScope,personRestAPI,$modal,$filter,$http,ngTableParams){function initializationStaff(){$scope.personId=null,$scope.choosenRole=null,getListPersonStructure();
}function getListPersonStructure(){var seasonCode=$scope.meta.season.code,structureId=$scope.meta.structure._id;personRestAPI.getListPersonStructure(seasonCode,structureId).success(function(person){var data=[];data=person,$log.debug(person),$scope.tableParams4=new ngTableParams({page:1,count:5,sorting:{name:"asc"}},{total:data.length,counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")(data,params.orderBy()):data;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}})})}$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.selectedPerson=function(pers){pers.selected||($log.debug(pers),$scope.personId=pers._id)},$scope.selectRole=function(role){$scope.choosenRole=role,$log.debug(role)},$scope.add=function(){null!==$scope.personId&&null!==$scope.choosenRole?($log.debug($scope.personId),$log.debug($scope.choosenRole),$modalInstance.dismiss("cancel")):alert("Select person and/or role!")},initializationStaff()}]);var structureTeamsMod=angular.module("structureTeamsMod",["structureCfgRestAPI","personRestAPI","activityCfgRestAPI","seasonsAPI","ngTable","ngTableExport","xeditable"]);structureTeamsMod.config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){$routeProvider.when("/private/structureTeamsMod",{controller:"structureTeamsCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/structure/structureTeams.html"})}]),structureTeamsMod.controller("structureTeamsCtrl",["$log","$scope","$rootScope","$translate","$filter","structureCfgRestAPI","personRestAPI","seasonsAPI","activityCfgRestAPI","$sce","ngTableParams","$modal","user","meta",function($log,$scope,$rootScope,$translate,$filter,structureCfgRestAPI,personRestAPI,seasonsAPI,activityCfgRestAPI,$sce,ngTableParams,$modal,user,meta){function initialisation(){$scope.steps=["one","two"],$scope.step=0,$scope.inBack=!1,$scope.selectedSeasonTeams=[];$scope.selectedTeam=null,$scope.selectedStaffMember=null,$scope.teamData=null,$scope.teamAgeCategory=null,$scope.teamGameLvl=null,$scope.teamChampionchip=null,$scope.teamLabel=null,$scope.staffMemberData=null,$scope.staffMemberId=null,$scope.staffMemberRole=null,$scope.staffMemberRoleCode=null,$scope.person={};var d=new Date;$scope.date=d.getTime(),$scope.gameLevels=[],$scope.ageCategories=[],$scope.teamComplete={},$scope.team={},$scope.idx=[],$scope.personId=null,$scope.selectedPerson=null,$scope.selecPersonIdx=null,$scope.role=null,$scope.structureSeasons=[];$scope.personDetails=[],getCategoriesAgeList(),getListPersonStructure()}function getCategoriesAgeList(){activityCfgRestAPI.getCategoriesAgeList($scope.date,$scope.structure.codeActivity,$scope.structure.country._id).success(function(ageCategories){$scope.ageCategories=ageCategories,$log.debug($scope.ageCategories),getLevelGameList()})}function getLevelGameList(){activityCfgRestAPI.getLevelGameList($scope.date,$scope.structure.codeActivity,$scope.structure.country._id).success(function(gameLevels){$scope.gameLevels=gameLevels,getStructureSeasonsList()})}function getStructureSeasonsList(){$log.debug("structureTeamsCtrl.getStructureSeasonsList()"),seasonsAPI.getStructureSeasonsList($scope.structure.codeActivity,$scope.structure._id).success(function(structureSeasons){for(var i=0;i<structureSeasons.length;i++)$scope.structureSeasons.push(structureSeasons[i].code);$log.debug($scope.structureSeasons),getTeamsStrList($scope.saison)})}function getTeamsStrList(seasonCode){$log.debug("structureTeamsCtrl.getTeamsStrList()"),structureCfgRestAPI.getTeamsStrList(seasonCode,$scope.structure._id).success(function(teams){if($log.debug("This is the value from getTeamsStrList function",seasonCode),$log.debug("This is the value for teams",teams),$scope.selectedSeasonTeams=teams,$log.debug("This is selectedSeasonTeams",$scope.selectedSeasonTeams),$scope.selectedSeasonTeams.length>0)for(var i=0;i<$scope.selectedSeasonTeams.length;i++){teamsStr=$scope.selectedSeasonTeams[i];for(var j=0;j<teamsStr.listStaffMember.length;j++)teamStaffMember=teamsStr.listStaffMember[j],null!==teamStaffMember.personId&&getPersonById(teamStaffMember)}})}function getTeamsStrListForSelectedSeason(){return $scope.selectedSeasonTeams}function getPersonById(staffMember){$log.debug("structureTeamsCtrl.getPersonById()"),personRestAPI.getPerson(staffMember.personId).success(function(person){staffMember.person=person})}function openModalPerson(personDetails){$scope.personDetails=personDetails,console.log("personDetails",$scope.personDetails);$modal.open({templateUrl:"templates/prive/organization/structure/personDetailsModal.html",controller:"personDetailsCtrl",backdrop:"true",scope:$scope,size:"sm",resolve:{personDetails:function(){return $scope.personDetails}}})}function getListPersonStructure(){$log.debug("structureTeamsCtrl.getListPersonStructure()-$scope.season.selected : "+$scope.season.selected+"-$scope.structure._id : "+$scope.structure._id),personRestAPI.getListPersonStructure($scope.season.selected,$scope.structure._id).success(function(person){var data=[];data=person,$log.debug(data),$scope.len=data.length,$scope.tableParams1=new ngTableParams({page:1,count:3,sorting:{name:"asc"}},{total:data.length,counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")(data,params.orderBy()):data;$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}})})}$scope.meta=meta,$scope.season=$scope.meta.season,$scope.structure=$scope.meta.structure,$scope.season={selected:$scope.season.code},$scope.saison=$scope.season.selected,initialisation(),$scope.addTeam=function(teamComplete){$log.debug("addTeam",teamComplete),$modal.open({templateUrl:"templates/prive/organization/structure/addTeamsModal.html",controller:"addTeamCtrl",backdrop:"true",scope:$scope,size:"lg",resolve:{teamComplete:function(){return $scope.teamComplete},meta:function(){return $scope.meta}}})},$scope.editTeam=function(team){$scope.team=team,$log.debug("editTeam",$scope.team),$modal.open({templateUrl:"templates/prive/organization/structure/editTeamStaffModal.html",controller:"editTeamCtrl",backdrop:"true",scope:$scope,size:"lg",resolve:{team:function(){return $scope.team},meta:function(){return $scope.meta}}})},$scope.openPlayerSheetModal=function(person){$scope.person=person,$modal.open({templateUrl:"templates/prive/organization/effective/playerPersonalInfoModal.html",controller:"PlayerPersonalInfoModalInstanceCtrl",size:"lg",resolve:{person:function(){return $scope.person}}})},$scope.teamSelected=function(idx,selectedTeam){$scope.idx=idx,$scope.teamComplete=selectedTeam,$log.debug($scope.idx,$scope.teamComplete)},$scope.tableParams=new ngTableParams({page:1,count:10,sorting:{categoryAgeCode:"asc"}},{total:function(){return getTeamsStrListForSelectedSeason().length},counts:[],getData:function($defer,params){var orderedData=params.sorting()?$filter("orderBy")(getTeamsStrListForSelectedSeason(),params.orderBy()):getTeamsStrListForSelectedSeason();$defer.resolve(orderedData.slice((params.page()-1)*params.count(),params.page()*params.count()))}}),$scope.$watch("saison",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&($log.debug("This is the value from $watch saison function",newValue),getTeamsStrList(newValue),$scope.tableParams.total($scope.selectedSeasonTeams.length),$scope.tableParams.reload())}),$scope.showCategoryAge=function(team){$log.debug(team.categoryAge.code);var selected=[];return team.categoryAge.code&&(selected=$filter("filter")($scope.ageCategories,{code:team.categoryAge.code}),$log.debug("This is from var selected",selected[0].code)),selected.length?selected[0].label:"Not set"},$scope.showGameLevel=function(team){var selected=[];return team.teamGameLvlCode&&(selected=$filter("filter")($scope.gameLevels,{code:team.teamGameLvlCode})),selected.length?selected[0].label:"Not set"},$scope.getSelectedTeam=function(selectedTeam,teamData){$scope.selectedTeam=selectedTeam,$scope.teamData=teamData,$scope.selectedStaffMember=null,$scope.teamLabel=teamData.label,$scope.teamAgeCategory=teamData.categoryAgeCode,$scope.teamGameLvl=teamData.gameLevel,$scope.teamChampionchip=teamData.championchip,$log.debug(teamData),$log.debug($scope.selectedTeam),$log.debug($scope.selectedStaffMember)},$scope.getSelectedTeamStaff=function(selectedTeam,teamLabel,teamAgeCategory,selectedStaffMember,staffMemberData){$scope.selectedTeam=selectedTeam,$scope.teamLabel=teamLabel,$scope.teamAgeCategory=teamAgeCategory,$scope.selectedStaffMember=selectedStaffMember,$scope.staffMemberData=staffMemberData,$scope.staffMemberId=staffMemberData.personId,$scope.staffMemberRole=staffMemberData.role.label,$scope.staffMemberRoleCode=staffMemberData.role.code},$scope.showPersonDetails=function(idx,person){personIndex=idx,personDetails=person,$log.debug(personIndex,personDetails),openModalPerson(person)},$scope.changeSeason=function(season){$scope.saison=season,$log.debug("This is the value from changeSeason function",$scope.saison)}}]),structureTeamsMod.controller("addTeamCtrl",["$log","$scope","$rootScope","$modalInstance","teamComplete","$window","activityCfgRestAPI","meta",function($log,$scope,$rootScope,$modalInstance,teamComplete,$window,activityCfgRestAPI,meta){function initialisation(){$log.debug("addTeamCtrl"),$scope.myForm={},$scope.myForm.$invalid=!1,$scope.teamComplete=teamComplete,$log.debug($scope.teamComplete);var d=($scope.structure._id,new Date);$scope.date=d.getTime(),$scope.ageCategories=[],$scope.gameLevels=[],$scope.ageCategory={selected:null},$scope.gameLevel={selected:null},$scope.championship={selected:null},getCategoriesAgeList()}function getCategoriesAgeList(){activityCfgRestAPI.getCategoriesAgeList($scope.date,$scope.structure.codeActivity,$scope.structure.country._id).success(function(ageCategories){$scope.ageCategories=ageCategories,getLevelGameList()})}function getLevelGameList(){activityCfgRestAPI.getLevelGameList($scope.date,$scope.structure.codeActivity,$scope.structure.country._id).success(function(gameLevels){$scope.gameLevels=gameLevels})}$scope.meta=meta,$scope.structure=$scope.meta.structure,initialisation(),$scope.isFirstStep=function(){return 0===$scope.step},$scope.isLastStep=function(){return $scope.step===$scope.steps.length-1},$scope.getCurrentStep=function(){return $scope.steps[$scope.step]},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.handlePrevious=function(){inBackState=!0,console.log("in back ",inBackState),$scope.step-=$scope.isFirstStep()?0:1},$scope.handleNext=function(dismiss){$scope.myForm.$invalid?(alert("You have invalidated the form. Please fix."),inBackState=!1):$scope.isLastStep()||($scope.step+=1)}}]),structureTeamsMod.controller("editTeamCtrl",["$log","$scope","$rootScope","$modal","$modalInstance","team","$window","activityCfgRestAPI","meta",function($log,$scope,$rootScope,$modal,$modalInstance,team,$window,activityCfgRestAPI,meta){function initialisation(){$scope.team.listStaffMember=team.listStaffMember,$scope.tempStaff=[];for(var j=0;j<$scope.team.listStaffMember.length;j++)$scope.tempStaff.push($scope.team.listStaffMember[j]);$scope.person={},$scope.personSheet={},$scope.role=null,$scope.selecPersonIdx="",d=new Date,$scope.date=d.getTime(),$scope.roles=[],$scope.selectedRole={"default":null},$scope.newPerson=Array.create(),getRoleList()}function getRoleList(){activityCfgRestAPI.getRoleList($scope.date,$scope.structure.codeActivity,$scope.structure.country._id).success(function(roles){var coach=roles[3],acoach=roles[4],kine=roles[5];$scope.roles.push(coach,acoach,kine)})}function verifyRolePerson(role,pers,persIdx){for(var exist=!1,p=0;p<$scope.tempStaff.length;p++){var roleCode=$scope.tempStaff[p].role.code,persId=$scope.tempStaff[p].person._id;if($log.debug("This is variable roleCode",roleCode),$log.debug("This is variable persId",persId),pers._id===persId&&role.code===roleCode){alert("Choose another role for this person"),exist=!0,reset();break}}exist===!1&&pushMember(role,pers,persIdx)}function pushMember(role,pers,persIdx){$scope.role=role,$scope.person=pers,$scope.selecPersonIdx=persIdx,$scope.tempStaff.push({person:$scope.person,personId:$scope.person._id,role:$scope.role}),reset()}function reset(){$scope.selecPersonIdx="",$scope.person=null,$scope.role=null}$log.debug("editTeamCtrl"),$scope.meta=meta,$scope.structure=$scope.meta.structure,initialisation(),$scope.addPersonModal=function(){console.log("addPersonModal"),$modal.open({templateUrl:"templates/prive/organization/structure/addPersonModal.html",controller:"addPersonCtrl",backdrop:"true",scope:$scope,size:"lg",resolve:{newPerson:function(){return $scope.newPerson}}})},$scope.cancel=function(){$modalInstance.dismiss("cancel"),initialisation()},$scope.getRole=function(role,pers,persIdx){role?verifyRolePerson(role,pers,persIdx):alert("Select role to add person")},$scope.openPlayerSheetModal=function(person){$scope.personSheet=person,$modal.open({templateUrl:"templates/prive/organization/effective/playerPersonalInfoModal.html",controller:"PlayerPersonalInfoModalInstanceCtrl",size:"lg",resolve:{person:function(){return $scope.personSheet}}})},$scope.removeMember=function(idx){$scope.tempStaff.splice(idx,1),$log.debug(idx,$scope.tempStaff)},$scope.validate=function(){$log.debug($scope.tempStaff),$scope.team.listStaffMember=[];for(var j=0;j<$scope.tempStaff.length;j++)$scope.team.listStaffMember.push($scope.tempStaff[j]);$log.debug("New staff object to insert in DB is :"),$log.debug($scope.team.listStaffMember)}}]),structureTeamsMod.controller("addPersonCtrl",["$log","$scope","$modalInstance","$window","$filter",function($log,$scope,$modalInstance,$window,$filter){$log.debug("addPersonCtrl"),$scope.newPerson=Array.create(),$scope.dt=new Date,$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!0},$scope.format="dd/MM/yyyy",$scope.clear=function(){$scope.dt=null},$scope.disabled=function(date,mode){return"day"===mode&&(0===date.getDay()||6===date.getDay())},$scope.cancel=function(){$modalInstance.dismiss("cancel")},$scope.validate=function(){}}]),structureTeamsMod.controller("personDetailsCtrl",["$log","$scope","$modalInstance","$window","$filter","personDetails",function($log,$scope,$modalInstance,$window,$filter,personDetails){$log.debug("personDetailsCtrl"),$scope.personDetails=personDetails,$log.debug($scope.personDetails),$scope.cancel=function(){$modalInstance.dismiss("cancel")}}]),angular.module("categoryTeamsMod",["labelsAPI","teamRestAPI","teamCfgRestAPI","structureCfgRestAPI","personRestAPI","userMetaAPI","seasonsAPI","ui.utils","activityCfgRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/categoryTeamsMod",{controller:"CategoryTeamsDashboardCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/structureNew/categoryTeamsDashboard.html"})}]).controller("CategoryTeamsDashboardCtrl",["$log","$window","$scope","$route","$rootScope","$modal","teamCfgRestAPI","teamRestAPI","structureCfgRestAPI","activityCfgRestAPI","personRestAPI","seasonsAPI","eventbus","$q","$filter","$location","$translatePartialLoader","user","meta",function($log,$window,$scope,$route,$rootScope,$modal,teamCfgRestAPI,teamRestAPI,structureCfgRestAPI,activityCfgRestAPI,personRestAPI,seasonsAPI,eventbus,$q,$filter,$location,$translatePartialLoader,user,meta){function getStructureSeasonsList(){seasonsAPI.getStructureSeasonsList(meta.activity.code,$scope.meta.structure._id).success(function(data){data.forEach(function(a){$scope.seasons.push(a)});var trouve=!1;data.forEach(function(b){b.code===meta.season.code&&($scope.currentSeason=b,trouve=!0)}),trouve||($scope.currentSeason=data[0])})}function getLevelGameList(){activityCfgRestAPI.getLevelGameList(moment().valueOf(),meta.activity.code,meta.structure.country._id).success(function(data){$scope.gameLevels=data})}function getAllCategories(seasonCode){$scope.categories=[],structureCfgRestAPI.getCategoriesAgeStrList(seasonCode,$scope.meta.structure._id).success(function(data){data.forEach(function(a){$scope.categories.push(a)});var trouve=!1;data.forEach(function(b){b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,trouve=!0)})}),trouve||($scope.currentCategory=data[0]),getCategoryStaff($scope.currentCategory)})}function getCategoryStaff(categoryAge){$scope.categoryStaff=categoryAge.listStaffMember,$scope.categoryStaff.forEach(function(staff){null!==staff.personId&&getPersonById(staff)})}function getPersonById(staffMember){personRestAPI.getPerson(staffMember.personId).success(function(person){staffMember.person=person})}function getAllTeams(categoryAge,seasonCode){$scope.teams=[],teamRestAPI.getTeamList($scope.meta.structure._id,categoryAge).success(function(data){data.forEach(function(a){$scope.teams.push(a)}),getTeamCfg(seasonCode)})}function getTeamCfg(seasonCode){$scope.teamsView=[],$scope.teams.forEach(function(a){teamCfgRestAPI.getTeamCfgList(a._id,seasonCode).success(function(teamCfgSeason){$log.log(teamCfgSeason[0]),angular.isDefined(teamCfgSeason[0])&&(a.teamCfg=teamCfgSeason[0],$scope.teamsView.push(a))})})}$route.current;$scope.user=user,$scope.meta=meta,$translatePartialLoader.addPart("structureNew"),$scope.$watch(function(){return $filter("translate")("categoryTeams.dashboard.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.goBack=function(){$window.history.back()},$scope.categories=[],$scope.teams=[],$scope.teamsView=[],$scope.teamsView.teamCfg=[],$scope.categoryStaff=[],$scope.teamStaff=[],$scope.seasons=[],$scope.gameLevels=[],getStructureSeasonsList(),getLevelGameList(),$scope.$watch("currentSeason",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&getAllCategories(newValue.code)}),$scope.$watch("currentCategory",function(newValue,oldValue){angular.isDefined(newValue)&&!angular.equals(newValue,oldValue)&&(getCategoryStaff(newValue),getAllTeams(newValue.code,$scope.currentSeason.code))})}]),angular.module("categoryTeamsSheetMod",["labelsAPI","structureCfgRestAPI","personRestAPI","userMetaAPI","ui.utils","activityCfgRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/categoryTeamsSheet",{controller:"CategoryTeamsSheetCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/organization/structureNew/categoryTeamsSheet.html"})}]).controller("CategoryTeamsSheetCtrl",["$log","$window","$scope","$route","$rootScope","$modal","structureCfgRestAPI","activityCfgRestAPI","personRestAPI","seasonsAPI","eventbus","$q","$filter","$location","$translatePartialLoader","user","meta",function($log,$window,$scope,$route,$rootScope,$modal,structureCfgRestAPI,activityCfgRestAPI,personRestAPI,seasonsAPI,eventbus,$q,$filter,$location,$translatePartialLoader,user,meta){$route.current;$scope.user=user,$scope.meta=meta,$translatePartialLoader.addPart("structureNew"),$scope.$watch(function(){return $filter("translate")("categoryTeams.formAddCategory.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.goBack=function(){$window.history.back()}}]),angular.module("playerList",["common-config","effectiveRestAPI","personRestAPI","structureCfgRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/playerlist",{controller:"PlayerListControler",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/players/playerList.html"})}]).controller("PlayerListControler",["$log","$scope","$translatePartialLoader","$location","$rootScope","$q","$filter","eventbus","user","meta","effectiveRestAPI","personRestAPI","structureCfgRestAPI",function($log,$scope,$translatePartialLoader,$location,$rootScope,$q,$filter,eventbus,user,meta,effectiveRestAPI,personRestAPI,structureCfgRestAPI){"use strict";$translatePartialLoader.addPart("main"),$translatePartialLoader.addPart("players"),$translatePartialLoader.addPart("stats"),$scope.user=user,$scope.meta=meta,$scope.effective=[],$scope.currentCategory={},$(".collapsible").collapsible({accordion:!1}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,found=!0)})}),found||($scope.currentCategory=data[0]),$scope.getEffective()}),$scope.getEffective=function(){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,$scope.currentCategory.code).success(function(data){var listId=[];data.forEach(function(a){listId=a.members});var listField=new Array("_id","name","firstname","avatar","status","birthdate");personRestAPI.getListPerson(listId,listField).success(function(data){data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType="",angular.isDefined(e.status.stateForm)?e.stateForm=$filter("translate")("stat.stateForm.value."+e.status.stateForm):e.stateForm="",e.birthdate=$filter("date")(e.birthdate,"yyyy"),e.age=moment().format("YYYY")-e.birthdate}),$scope.effective=data})})}}]),angular.module("prive",["common-config","effectiveRestAPI","personRestAPI","structureCfgRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private",{controller:"HomeControler",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/home.html"}).when("/private/notifications",{controller:"NotificationsCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/profile/notifications.html"}).when("/private/calendar",{controller:"CalendarCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/calendar.html"})}]).controller("HomeControler",["$log","$scope","$translatePartialLoader","$location","$rootScope","$q","$filter","eventbus","user","meta","effectiveRestAPI","personRestAPI","structureCfgRestAPI",function($log,$scope,$translatePartialLoader,$location,$rootScope,$q,$filter,eventbus,user,meta,effectiveRestAPI,personRestAPI,structureCfgRestAPI){"use strict";$translatePartialLoader.addPart("main"),$translatePartialLoader.addPart("stats"),$scope.user=user,$scope.meta=meta,$scope.effective=[],$scope.currentCategory={},$(".collapsible").collapsible({accordion:!1}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,found=!0)})}),found||($scope.currentCategory=data[0]),$scope.getEffective()}),$scope.getEffective=function(){effectiveRestAPI.getListMemberEffective($scope.meta.season.code,$scope.meta.structure._id,$scope.currentCategory.code).success(function(data){var listId=[];data.forEach(function(a){listId=a.members});var listField=new Array("_id","name","firstname","avatar","status");personRestAPI.getListPerson(listId,listField).success(function(data){data.forEach(function(e){angular.isDefined(e.status.positionType)?e.positionType=$filter("translate")("stat.positionType.value."+e.status.positionType):e.positionType=""}),$scope.effective=data})})}}]),angular.module("profile",["profileRestAPI","userInfosAPI","structureCfgRestAPI","locationAPI","userMetaAPI","statAPI","chart.js"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/profil",{controller:"ProfileCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/profil.html"})}]).controller("ProfileCtrl",["$scope","eventbus","profileRestAPI","userInfosAPI","userMetaAPI","statAPI","$filter","structureCfgRestAPI","$translatePartialLoader","$rootScope","$location","$window","locationAPI","$log","user","meta",function($scope,eventbus,profileRestAPI,userInfosAPI,userMetaAPI,statAPI,$filter,structureCfgRestAPI,$translatePartialLoader,$rootScope,$location,$window,locationAPI,$log,user,meta){"use strict";$translatePartialLoader.addPart("profile"),$translatePartialLoader.addPart("stats"),$translatePartialLoader.addPart("format"),$translatePartialLoader.addPart("effective"),$translatePartialLoader.addPart("data"),$scope.season=meta.season,$scope.activity=meta.activity,$scope.structure=meta.structure,$scope.user=user,$scope.birthdate=moment().format($filter("translate")("date.format")),$scope.pdfUrl="/rest/prive/profile/pdf?token="+$window.sessionStorage.qaobeesession,$scope.billPdfUrl="/rest/prive/profile/billpdf?token="+$window.sessionStorage.qaobeesession,$scope.dateOption={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date},$scope.attendance={options:{scaleLineColor:"#fff",scaleFontSize:10,scaleFontColor:"#fff",tooltipFontSize:10,tooltipTitleFontSize:10,maintainAspectRatio:!1,animationEasing:"easeOutQuart",percentageInnerCutout:85,legendTemplate:""},data:{labels:[],series:[],datasets:[[]]}},$scope.$on("$destroy",function(){delete $scope.user,delete $scope.pdfUrl,delete $scope.billPdfUrl,delete $scope.dateOption,delete $scope.birthdate}),$scope.birthdate=moment(user.birthdate).format($filter("translate")("date.format"));var search={listIndicators:Array.create("attendance"),listOwners:Array.create(user._id),startDate:meta.season.startDate,endDate:meta.season.endDate,value:$filter("translate")("stat.attendance.val"),aggregat:"AVG",listFieldsGroupBy:["code"]};statAPI.getStatGroupBy(search).success(function(data){if(angular.isArray(data)&&data.length>0){var labels=[],datasets=[];labels.push($filter("translate")("stat.attendance.value.present")),labels.push($filter("translate")("stat.attendance.value.absent")),datasets.push(parseInt($filter("number")(100*data[0].value,2))),datasets.push(parseInt($filter("number")(100*(1-data[0].value),2))),$scope.attendance.data={labels:labels,datasets:datasets}}}),$scope.technicalRadar={datasets:[[]],series:[$filter("translate")("playerSheet.rubrics.technical.title")],labels:[]},$scope.physicalRadar={datasets:[[]],series:[$filter("translate")("playerSheet.rubrics.physical.title")],labels:[]},$scope.mentalRadar={datasets:[[]],series:[$filter("translate")("playerSheet.rubrics.mental.title")],labels:[]},$scope.ownersId=Array.create(user._id),angular.isDefined($scope.user.technicalFolder)&&null!==$scope.user.technicalFolder&&$scope.user.technicalFolder.forEach(function(a){$scope.technicalRadar.labels.push($filter("translate")("playerSheet.rubrics.technical.label."+a.key)),$scope.technicalRadar.datasets[0].push(a.value)}),angular.isDefined($scope.user.physicalFolder)&&null!==$scope.user.physicalFolder&&$scope.user.physicalFolder.forEach(function(a){$scope.physicalRadar.labels.push($filter("translate")("playerSheet.rubrics.physical.label."+a.key)),$scope.physicalRadar.datasets[0].push(a.value)}),angular.isDefined($scope.user.mentalFolder)&&null!==$scope.user.mentalFolder&&$scope.user.mentalFolder.forEach(function(a){$scope.mentalRadar.labels.push($filter("translate")("playerSheet.rubrics.mental.label."+a.key)),$scope.mentalRadar.datasets[0].push(a.value)}),$scope.updateUser=function(profileForm){if(profileForm.$valid){var updUser={};angular.copy($scope.user,updUser),updUser.birthdate=$scope.dateOption.val,delete updUser.isAdmin,angular.isDefined(updUser.address.formatedAddress)&&""!==updUser.address.formatedAddress?locationAPI.get(updUser.address.formatedAddress).then(function(adr){updUser.address.lat=adr.data.results[0].geometry.location.lat,updUser.address.lng=adr.data.results[0].geometry.location.lng,angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("street_number")>0&&(updUser.address.place=item.long_name+" "),item.types.count("route")>0&&(updUser.address.place+=item.long_name),item.types.count("locality")>0&&(updUser.address.city=item.long_name),item.types.count("postal_code")>0&&(updUser.address.zipcode=item.long_name),item.types.count("country")>0&&(updUser.address.country=item.long_name)}),updUser.birthdate=$scope.dateOption.val,profileRestAPI.update(updUser).success(function(data){toastr.success(data.firstname+" "+data.name+$filter("translate")("popup.success.updated")),eventbus.prepForBroadcast("refreshUser",data)})}):profileRestAPI.update(updUser).success(function(data){toastr.success(data.firstname+" "+data.name+$filter("translate")("popup.success.updated")),eventbus.prepForBroadcast("refreshUser",data)})}},$scope.getLocation=function(val){return locationAPI.get(val).then(function(res){var addresses=[];return angular.forEach(res.data.results,function(item){addresses.push(item.formatted_address)}),addresses})}}]),angular.module("cycleMod",["common-config","labelsAPI","structureCfgRestAPI","summarysheet","effectiveRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","staffListWidget","unavailableEffectiveWidget","palmaresEffectiveWidget","profileRestAPI","groupAPI","labelsAPI","statAPI","themeService","activityCfgRestAPI","effectiveSearch","locationAPI","ui.utils","personRestAPI","flow","cycleRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/training/addCycle",{controller:"AddCycleCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/cycle/addCycle.html"}).when("/private/training/cycle/SearchCycle",{controller:"SearchCycleCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/cycle/searchCycle.html"}).when("/private/training/editCycle/:id",{controller:"EditCycleCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/cycle/editCycle.html"})}]).config(["flowFactoryProvider",function(flowFactoryProvider){flowFactoryProvider.defaults={singleFile:!0}}]).controller("AddCycleCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","cycleRestAPI","sessionRestAPI","$modal","structureCfgRestAPI","themeRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","themeService","$window","user","meta",function($log,$route,$routeParams,$scope,$rootScope,$timeout,cycleRestAPI,sessionRestAPI,$modal,structureCfgRestAPI,themeRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,themeService,$window,user,meta){$translatePartialLoader.addPart("training"),$scope.categories=[],$scope.cycle={},$scope.cycle.categoryAge={},$scope.theme={},$scope.themes=[],$scope.themeLabels=[],$scope.subthemesListAutoComplete=[],$scope.subThemeLabels=[],$scope.themesListAutoComplete=[],$scope.cycle.author={},$scope.cycle.author._id=user._id,$scope.cycle.author.name=user.name,$scope.cycle.author.firstname=user.firstname,$scope.cycle.theme={},$scope.cycle.subTheme={},$scope.cycle.theme.label="",$scope.cycle.subTheme.label="",$scope.theme.activityId=meta.activity.code,$scope.historyCycle={},$scope.historyCycle.author={},$scope.cycle.historyList=[],$scope.cycle.sessionCycleList=[],$scope.cycle.activityId=meta.activity.code,$scope.cycle.structureId=meta.structure._id;var promise=themeService.getThemes($scope.theme.activityId);promise.then(function(data){
$scope.themes=data;for(var i=0;i<$scope.themes.data.length;i++)$scope.themeLabels.push($scope.themes.data[i].label);$scope.themesListAutoComplete=themeService.unique($scope.themeLabels)}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b,$scope.cycle.categoryAge=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,$scope.cycle.categoryAge=b,found=!0)})}),found||($scope.currentCategory=data[0],$scope.cycle.categoryAge=data[0])}),$scope.cancel=function(){$window.history.back()},$scope.$watch(function(){return $filter("translate")("training.cycle.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.$watch("cycle.theme.label",function(newValue,oldValue){if("undefined"!=typeof $scope.cycle.subTheme&&($scope.cycle.subTheme.label=""),$scope.subthemesListAutoComplete=[],"undefined"!=typeof $scope.themes.data)for(var i=0;i<$scope.themes.data.length;i++)if($scope.themes.data[i].label==newValue){var nbrSubtheme=$scope.themes.data[i].subThemesList.length;$scope.theme=$scope.themes.data[i];for(var j=0;nbrSubtheme>j;j++)$scope.subthemesListAutoComplete.push($scope.themes.data[i].subThemesList[j].label);$scope.subthemesListAutoComplete=themeService.unique($scope.subthemesListAutoComplete);break}console.log($scope.subthemesListAutoComplete)},!0),$scope.addCycle=function(){if(""!==$scope.cycle.theme.label){var themeExist=$scope.themesListAutoComplete.indexOf($scope.cycle.theme.label);if(-1==themeExist)$scope.theme.label=$scope.cycle.theme.label,$scope.theme.subThemesList=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.theme.subThemesList.push({label:$scope.cycle.subTheme.label}),themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data});else if(""!==$scope.cycle.subTheme.label){var subthemExist=$scope.subthemesListAutoComplete.indexOf($scope.cycle.subTheme.label);"-1"==subthemExist&&($scope.theme.subThemesList.push({label:$scope.cycle.subTheme.label}),themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data}))}}$scope.historyCycle.author._id=user._id,$scope.historyCycle.author.name=user.name,$scope.historyCycle.author.firstname=user.firstname,$scope.historyCycle.historyType="creation",$scope.historyCycle.date=new Date,$scope.cycle.dateCreate=new Date,$scope.cycle.historyList.push($scope.historyCycle),delete $scope.cycle.categoryAge.listStaffMember,cycleRestAPI.addCycle($scope.cycle).success(function(data){$scope.cycle=data,$window.history.back()})},$scope.addSessionToCycle=function(id){sessionRestAPI.getSession(id).success(function(data){$scope.session=data,$scope.sessionCycle={},$scope.sessionCycle.session=$scope.session,$scope.isThemeCollapsed=!0,$scope.cycle.sessionCycleList.push($scope.sessionCycle.session)})},$scope.deleteSession=function(id){$scope.cycle.sessionCycleList.splice(id,1)}}]).controller("EditCycleCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","sessionRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","cycleRestAPI","$window","user","themeService","$log","meta","themeRestAPI","personRestAPI",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,sessionRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,cycleRestAPI,$window,user,themeService,$log,meta,themeRestAPI,personRestAPI){$translatePartialLoader.addPart("training"),$scope.theme={},$scope.themes=[],$scope.themeLabels=[],$scope.subthemesListAutoComplete=[],$scope.subThemeLabels=[],$scope.cycle={},$scope.cycle.file={},$scope.historyCycle={},$scope.cycle.categoryAge={},$scope.historyCycle.author={},$scope.cycle.historyList=[],$scope.cycle.commentList=[],$scope.userCorrent=user,$scope.count=0,$scope.commentList=[],$scope.comment={},$scope.comentValue={},$scope.comentValue.value="",$scope.authorPicture=user.avatar,$scope.cycle.author={},$scope.cycle.author._id=user._id,$scope.cycle.author.name=user.name,$scope.cycle.author.firstname=user.firstname,$scope.theme.activityId=meta.activity.code,$scope.isThemeCollapsed=!0,$scope.cycleId=$routeParams.id,cycleRestAPI.getCycle($routeParams.id).success(function(data){$scope.cycle=data,$scope.categories.forEach(function(b){$scope.cycle.categoryAge.code===b.code&&($scope.cycle.categoryAge=b)});var listIdUsers=[],listFields=[];if(listFields.push("avatar"),listFields.push("name"),listFields.push("firstname"),"undefined"!=typeof $scope.cycle.commentList){for(var i=0;i<$scope.cycle.commentList.length;i++)listIdUsers.push($scope.cycle.commentList[i].authorId);var promise=personRestAPI.getListPerson(listIdUsers,listFields);promise.then(function(data){$scope.users=data.data;for(var i=0;i<listIdUsers.length;i++){for(var object={},j=0;j<$scope.users.length;j++)listIdUsers[i]==$scope.users[j]._id&&(object={author:$scope.users[j],comment:$scope.cycle.commentList[i]});$scope.commentList.push(object)}})}else $scope.cycle.commentList=[]});var promise=themeService.getThemes($scope.theme.activityId);promise.then(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.data.length;i++)$scope.themeLabels.push($scope.themes.data[i].label);$scope.themesListAutoComplete=themeService.unique($scope.themeLabels),$scope.$watch("cycle.theme.label",function(newValue,oldValue){if($scope.count++,"undefined"!=typeof $scope.cycle.subTheme&&$scope.count>2&&($scope.cycle.subTheme.label=""),$scope.subthemesListAutoComplete=[],"undefined"!=typeof $scope.themes.data)for(var i=0;i<$scope.themes.data.length;i++)if($scope.themes.data[i].label==newValue){var nbrSubtheme=$scope.themes.data[i].subThemesList.length;$scope.theme=$scope.themes.data[i];for(var j=0;nbrSubtheme>j;j++)$scope.subthemesListAutoComplete.push($scope.themes.data[i].subThemesList[j].label);$scope.subthemesListAutoComplete=themeService.unique($scope.subthemesListAutoComplete);break}console.log($scope.count)},!0)}),$scope.$watch(function(){return $filter("translate")("training.cycle.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.cancel=function(){$window.history.back()},$scope.addSessionToCycle=function(id){sessionRestAPI.getSession(id).success(function(data){$scope.session=data,$scope.sessionCycle={},$scope.sessionCycle.session=$scope.session,$scope.cycle.sessionCycleList.push($scope.sessionCycle.session)})},$scope.addComent=function(){$scope.comment={},$scope.comment.authorId=user._id,$scope.comment.dateCreate=new Date,$scope.comment.content=$scope.comentValue.value,$scope.cycle.commentList.push($scope.comment);var object={author:user,comment:$scope.comment};$scope.commentList.push(object),$scope.comentValue.value="",$scope.cycle._id=$scope.cycleId,cycleRestAPI.updateCycle($scope.cycle).success(function(data){$scope.cycle=data})},$scope.removeComent=function(id){var index=$scope.cycle.commentList.indexOf($scope.commentList[id].comment);$scope.cycle.commentList.splice(index,1),$scope.commentList.splice(id,1),$scope.cycle._id=$scope.cycleId,cycleRestAPI.updateCycle($scope.cycle).success(function(data){$scope.cycle=data})},$scope.editComent=function(id){$scope.comentValue.value=$scope.commentList[id].comment.content;var index=$scope.cycle.commentList.indexOf($scope.commentList[id].comment);$scope.cycle.commentList.splice(index,1),$scope.commentList.splice(id,1)},$scope.updateCycle=function(){if(""!==$scope.cycle.theme.label){var themeExist=$scope.themesListAutoComplete.indexOf($scope.cycle.theme.label);if(-1==themeExist)$scope.theme.label=$scope.cycle.theme.label,$scope.theme.subThemesList=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.theme.subThemesList.push({label:$scope.cycle.subTheme.label}),themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data});else if(""!==$scope.cycle.subTheme.label){var subthemExist=$scope.subthemesListAutoComplete.indexOf($scope.cycle.subTheme.label);"-1"==subthemExist&&($scope.theme.subThemesList.push({label:$scope.cycle.subTheme.label}),themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data}))}}$scope.historyCycle.author._id=user._id,$scope.historyCycle.author.name=user.name,$scope.historyCycle.author.firstname=user.firstname,$scope.historyCycle.date=new Date,$scope.historyCycle.historyType="modification","undefined"==typeof $scope.cycle.commentList&&($scope.cycle.commentList=[]),$scope.cycle.historyList.push($scope.historyCycle),delete $scope.cycle.categoryAge.listStaffMember,$scope.cycle._id=$scope.cycleId,cycleRestAPI.updateCycle($scope.cycle).success(function(data){$scope.cycle=data,$window.history.back()})},$scope.deleteSession=function(id){$scope.cycle.sessionCycleList.splice(id,1)}}]).controller("SearchCycleCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","exerciseRestAPI","$window","user","themeService","$log","meta","cycleRestAPI","personRestAPI",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,exerciseRestAPI,$window,user,themeService,$log,meta,cycleRestAPI,personRestAPI){$translatePartialLoader.addPart("training"),$scope.cyclesList=[],$scope.cycle={},$scope.cycle.categoryAge={},exits=0,listTempCycle=[],$scope.searchCycle=function(){cycleRestAPI.getListCycle($scope.cycle.categoryAge.label,$scope.cycle.author,$scope.cycle.theme,$scope.cycle.subTheme,$scope.cycle.label).success(function(data){$scope.cyclesList=data,$scope.cyclesList.forEach(function(it){""!==$scope.cycle.key&&"undefined"!=typeof it.description&&(exits=it.description.indexOf($scope.cycle.key),-1!==exits&&listTempCycle.push(it))}),0!==listTempCycle.length&&($scope.cyclesList=listTempCycle)})},$scope.$watch(function(){return $filter("translate")("training.cycle.search")},function(newval){eventbus.prepForBroadcast("title",newval)}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b,$scope.exercise.categoryAge=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,$scope.cycle.categoryAge=b,found=!0)})}),found||($scope.currentCategory=data[0],$scope.cycle.categoryAge=data[0])}),$scope.cancel=function(){$window.history.back()}}]),angular.module("exerciseMod",["common-config","labelsAPI","structureCfgRestAPI","summarysheet","effectiveRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","staffListWidget","unavailableEffectiveWidget","palmaresEffectiveWidget","profileRestAPI","groupAPI","labelsAPI","statAPI","themeService","activityCfgRestAPI","effectiveSearch","locationAPI","ui.utils","personRestAPI","flow","exerciseRestAPI","personRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/training/addExercise",{controller:"AddExerciseCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/exercise/addExercise.html"}).when("/private/training/SearchExerciseForSession",{controller:"SearchExerciseCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/session/addExerciseToSession.html"}).when("/private/training/exercise/SearchExercise",{controller:"SearchExerciseCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/exercise/searchExercise.html"}).when("/private/training/editExercise/:id",{controller:"EditExerciseCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/exercise/editExercise.html"})}]).config(["flowFactoryProvider",function(flowFactoryProvider){flowFactoryProvider.defaults={singleFile:!0}}]).controller("AddExerciseCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","exerciseRestAPI","$modal","structureCfgRestAPI","themeRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","themeService","$window","user","meta",function($log,$route,$routeParams,$scope,$rootScope,$timeout,exerciseRestAPI,$modal,structureCfgRestAPI,themeRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,themeService,$window,user,meta){$translatePartialLoader.addPart("training"),$scope.categories=[],$scope.exercise={},$scope.exercise.subTheme={},$scope.exercise.categoryAge={},$scope.theme={},$scope.exercise.theme={},$scope.exercise.theme.label="",$scope.exercise.subTheme.label="",$scope.themes=[],$scope.themeLabels=[],$scope.subthemesListAutoComplete=[],$scope.subThemeLabels=[],$scope.themesListAutoComplete=[],$scope.exercise.author={},$scope.exercise.author._id=user._id,$scope.exercise.author.name=user.name,$scope.exercise.author.firstname=user.firstname,$scope.exercise.file={},$scope.historyExercise={},$scope.historyExercise.author={},$scope.exercise.historyList=[],$scope.exercise.activityId=meta.activity.code,$scope.exercise.structureId=meta.structure._id,$scope.count=0;var promise=themeService.getThemes($scope.exercise.activityId);promise.then(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.data.length;i++)$scope.themeLabels.push($scope.themes.data[i].label);$scope.themesListAutoComplete=themeService.unique($scope.themeLabels)}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b,$scope.exercise.categoryAge=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,$scope.exercise.categoryAge=b,found=!0)})}),found||($scope.currentCategory=data[0],$scope.exercise.categoryAge=data[0])}),$scope.cancel=function(){$window.history.back()},$scope.$watch(function(){return $filter("translate")("training.exercise.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.$watch("exercise.theme.label",function(newValue,oldValue){if($scope.count++,"undefined"!=typeof $scope.exercise.subTheme&&$scope.count>2&&($scope.exercise.subTheme.label=""),$scope.subthemesListAutoComplete=[],"undefined"!=typeof $scope.themes.data)for(var i=0;i<$scope.themes.data.length;i++)if($scope.themes.data[i].label==newValue){var nbrSubtheme=$scope.themes.data[i].subThemesList.length;$scope.theme=$scope.themes.data[i];for(var j=0;nbrSubtheme>j;j++)$scope.subthemesListAutoComplete.push($scope.themes.data[i].subThemesList[j].label);$scope.subthemesListAutoComplete=themeService.unique($scope.subthemesListAutoComplete);break}},!0),$scope.addExercise=function(e){if(console.debug(e.files[0]),"undefined"!=typeof e.files[0]&&($scope.exercise.file=e.files[0].file),$scope.historyExercise.author._id=user._id,$scope.historyExercise.author.name=user.name,$scope.historyExercise.author.firstname=user.firstname,$scope.historyExercise.historyType="creation",$scope.historyExercise.date=new Date,$scope.exercise.dateCreate=new Date,$scope.exercise.historyList.push($scope.historyExercise),delete $scope.exercise.categoryAge.istStaffMember,""!==$scope.exercise.theme.label){var themeExist=$scope.themesListAutoComplete.indexOf($scope.exercise.theme.label);if(-1==themeExist)$scope.theme.label=$scope.exercise.theme.label,$scope.theme.subThemesList=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.theme.subThemesList.push({label:$scope.exercise.subTheme.label}),themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data});else if(""!==$scope.exercise.subTheme.label){var subthemExist=$scope.subthemesListAutoComplete.indexOf($scope.exercise.subTheme.label);"-1"==subthemExist&&($scope.theme.subThemesList.push({label:$scope.exercise.subTheme.label}),themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data}))}}exerciseRestAPI.addExercise($scope.exercise).success(function(data){$scope.exercise=data,$window.history.back()})}}]).controller("EditExerciseCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","exerciseRestAPI","$window","user","themeService","$log","meta","themeRestAPI","personRestAPI",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,exerciseRestAPI,$window,user,themeService,$log,meta,themeRestAPI,personRestAPI){$translatePartialLoader.addPart("training"),$scope.theme={},$scope.themes=[],$scope.themeLabels=[],$scope.subthemesListAutoComplete=[],$scope.subThemeLabels=[],$scope.exercise={},$scope.exercise.file={},$scope.historyExercise={},$scope.exercise.categoryAge={},$scope.historyExercise.author={},$scope.exercise.historyList=[],$scope.exercise.commentList=[],$scope.commentList=[],$scope.comment={},$scope.comentValue={},$scope.comentValue.value="",$scope.authorPicture=user.avatar,$scope.userCorrent=user,$scope.exercise.author={},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.exercise.author._id=user._id,$scope.exercise.author.name=user.name,$scope.exercise.author.firstname=user.firstname,$scope.count=0,$scope.users=[],$scope.exerciseId=$routeParams.id,exerciseRestAPI.getExercise($routeParams.id).success(function(data){$scope.exercise=data,$scope.categories.forEach(function(b){$scope.exercise.categoryAge.code===b.code&&($scope.exercise.categoryAge=b)});var listIdUsers=[],listFields=[];if(listFields.push("avatar"),listFields.push("name"),listFields.push("firstname"),"undefined"!=typeof $scope.exercise.commentList){for(var i=0;i<$scope.exercise.commentList.length;i++)listIdUsers.push($scope.exercise.commentList[i].authorId);var promise=personRestAPI.getListPerson(listIdUsers,listFields);promise.then(function(data){$scope.users=data.data;for(var i=0;i<listIdUsers.length;i++){for(var object={},j=0;j<$scope.users.length;j++)listIdUsers[i]==$scope.users[j]._id&&(object={author:$scope.users[j],comment:$scope.exercise.commentList[i]});$scope.commentList.push(object)}})}else $scope.exercise.commentList=[]});var promise=themeService.getThemes($scope.theme.activityId);promise.then(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.data.length;i++)$scope.themeLabels.push($scope.themes.data[i].label);$scope.themesListAutoComplete=themeService.unique($scope.themeLabels),$scope.$watch("exercise.theme.label",function(newValue,oldValue){if($scope.count++,"undefined"!=typeof $scope.exercise.subTheme&&$scope.count>2&&($scope.exercise.subTheme.label=""),$scope.subthemesListAutoComplete=[],"undefined"!=typeof $scope.themes.data)for(var i=0;i<$scope.themes.data.length;i++)if($scope.themes.data[i].label==newValue){var nbrSubtheme=$scope.themes.data[i].subThemesList.length;$scope.theme=$scope.themes.data[i];for(var j=0;nbrSubtheme>j;j++)$scope.subthemesListAutoComplete.push($scope.themes.data[i].subThemesList[j].label);$scope.subthemesListAutoComplete=themeService.unique($scope.subthemesListAutoComplete);break}console.log($scope.subthemesListAutoComplete)},!0)}),$scope.$watch(function(){return $filter("translate")("training.exercise.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.cancel=function(){$window.history.back()},$scope.addComent=function(){$scope.comment={},$scope.comment.authorId=user._id,$scope.comment.dateCreate=new Date,$scope.comment.content=$scope.comentValue.value,$scope.exercise.commentList.push($scope.comment);var object={author:user,comment:$scope.comment};$scope.commentList.push(object),$scope.comentValue.value="",$scope.exercise._id=$scope.exerciseId,exerciseRestAPI.updateExercise($scope.exercise).success(function(data){$scope.exercise=data})},$scope.removeComent=function(id){var index=$scope.exercise.commentList.indexOf($scope.commentList[id].comment);$scope.exercise.commentList.splice(index,1),$scope.commentList.splice(id,1),$scope.exercise._id=$scope.exerciseId,exerciseRestAPI.updateExercise($scope.exercise).success(function(data){$scope.exercise=data})},$scope.editComent=function(id){$scope.comentValue.value=$scope.commentList[id].comment.content;var index=$scope.exercise.commentList.indexOf($scope.commentList[id].comment);$scope.exercise.commentList.splice(index,1),$scope.commentList.splice(id,1)},$scope.updateExercise=function(e,$parent){if("undefined"!=typeof e.files[0]&&($scope.exercise.file=e.files[0].file),""!==$scope.exercise.theme.label){var themeExist=$scope.themesListAutoComplete.indexOf($scope.exercise.theme.label);if(-1==themeExist)$scope.theme.label=$scope.exercise.theme.label,$scope.theme.subThemesList=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.theme.subThemesList.push({label:$scope.exercise.subTheme.label}),themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data});else if(""!==$scope.exercise.subTheme.label){var subthemExist=$scope.subthemesListAutoComplete.indexOf($scope.exercise.subTheme.label);"-1"==subthemExist&&($scope.theme.subThemesList.push({label:$scope.exercise.subTheme.label}),themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data}))}}$scope.historyExercise.author._id=user._id,$scope.historyExercise.author.name=user.name,$scope.historyExercise.author.firstname=user.firstname,$scope.historyExercise.date=new Date,$scope.historyExercise.historyType="modification","undefined"==typeof $scope.exercise.commentList&&($scope.exercise.commentList=[]),$scope.exercise.historyList.push($scope.historyExercise),delete $scope.exercise.categoryAge.listStaffMember,$scope.exercise._id=$scope.exerciseId,exerciseRestAPI.updateExercise($scope.exercise).success(function(data){$scope.exercise=data,$window.history.back()})}}]).controller("SearchExerciseCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","exerciseRestAPI","$window","user","themeService","$log","meta","exerciseRestAPI","personRestAPI",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,exerciseRestAPI,$window,user,themeService,$log,meta,exerciseRestAPI,personRestAPI){$translatePartialLoader.addPart("training"),$scope.exercisesList=[],$scope.exercise={},$scope.exercise.categoryAge={},exits=0,listTempExercise=[],$scope.searchExercise=function(){exerciseRestAPI.getListExercise($scope.exercise.categoryAge.label,$scope.exercise.author,$scope.exercise.theme,$scope.exercise.subTheme,$scope.exercise.label).success(function(data){$scope.exercisesList=data,$scope.exercisesList.forEach(function(it){""!==$scope.exercise.key&&"undefined"!=typeof it.description&&(exits=it.description.indexOf($scope.exercise.key),-1!==exits&&listTempExercise.push(it))}),0!==listTempExercise.length&&($scope.exercisesList=listTempExercise)})},$scope.$watch(function(){return $filter("translate")("training.exercise.search")},function(newval){eventbus.prepForBroadcast("title",newval)}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b,$scope.exercise.categoryAge=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,$scope.exercise.categoryAge=b,found=!0)})}),found||($scope.currentCategory=data[0],$scope.exercise.categoryAge=data[0])}),$scope.cancel=function(){$window.history.back()}}]),angular.module("sessionMod",["common-config","labelsAPI","structureCfgRestAPI","summarysheet","effectiveRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","staffListWidget","unavailableEffectiveWidget","palmaresEffectiveWidget","profileRestAPI","groupAPI","labelsAPI","statAPI","themeService","activityCfgRestAPI","effectiveSearch","locationAPI","ui.utils","personRestAPI","flow","sessionRestAPI"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/training/addSession",{controller:"AddSessionCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/session/addSession.html"}).when("/private/training/session/SearchSession",{controller:"SearchSessionCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/session/searchSession.html"}).when("/private/training/editSession/:id",{controller:"EditSessionCtrl",resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/session/editSession.html"})}]).config(["flowFactoryProvider",function(flowFactoryProvider){flowFactoryProvider.defaults={singleFile:!0}}]).controller("AddSessionCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","sessionRestAPI","exerciseRestAPI","$modal","structureCfgRestAPI","themeRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","themeService","$window","user","meta",function($log,$route,$routeParams,$scope,$rootScope,$timeout,sessionRestAPI,exerciseRestAPI,$modal,structureCfgRestAPI,themeRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,themeService,$window,user,meta){$translatePartialLoader.addPart("training"),$scope.categories=[],$scope.session={},$scope.session.categoryAge={},$scope.theme={},$scope.themes=[],$scope.themeLabels=[],$scope.subthemesListAutoComplete=[],$scope.subThemeLabels=[],$scope.themesListAutoComplete=[],$scope.session.author={},$scope.session.author._id=user._id,$scope.session.author.name=user.name,$scope.session.author.firstname=user.firstname,$scope.session.theme={},$scope.session.subTheme={},$scope.session.theme.label="",$scope.session.subTheme.label="",$scope.theme.activityId=meta.activity.code,$scope.historySession={},$scope.historySession.author={},$scope.session.historyList=[],$scope.session.exerciseSessionList=[],$scope.session.activityId=meta.activity.code,$scope.session.structureId=meta.structure._id;var promise=themeService.getThemes($scope.theme.activityId);promise.then(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.data.length;i++)$scope.themeLabels.push($scope.themes.data[i].label);$scope.themesListAutoComplete=themeService.unique($scope.themeLabels)}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b,$scope.session.categoryAge=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,$scope.session.categoryAge=b,found=!0)})}),found||($scope.currentCategory=data[0],$scope.session.categoryAge=data[0])}),$scope.cancel=function(){$window.history.back()},$scope.$watch(function(){return $filter("translate")("training.session.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.$watch("session.theme.label",function(newValue,oldValue){if("undefined"!=typeof $scope.session.subTheme&&($scope.session.subTheme.label=""),$scope.subthemesListAutoComplete=[],"undefined"!=typeof $scope.themes.data)for(var i=0;i<$scope.themes.data.length;i++)if($scope.themes.data[i].label==newValue){var nbrSubtheme=$scope.themes.data[i].subThemesList.length;$scope.theme=$scope.themes.data[i];for(var j=0;nbrSubtheme>j;j++)$scope.subthemesListAutoComplete.push($scope.themes.data[i].subThemesList[j].label);$scope.subthemesListAutoComplete=themeService.unique($scope.subthemesListAutoComplete);break}console.log($scope.subthemesListAutoComplete)},!0),$scope.addSession=function(){if(""!==$scope.session.theme.label){var themeExist=$scope.themesListAutoComplete.indexOf($scope.session.theme.label);if(-1==themeExist)$scope.theme.label=$scope.session.theme.label,$scope.theme.subThemesList=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.theme.subThemesList.push({label:$scope.session.subTheme.label}),themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data});else if(""!==$scope.session.subTheme.label){var subthemExist=$scope.subthemesListAutoComplete.indexOf($scope.session.subTheme.label);"-1"==subthemExist&&($scope.theme.subThemesList.push({label:$scope.session.subTheme.label}),themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data}))}}$scope.historySession.author._id=user._id,$scope.historySession.author.name=user.name,$scope.historySession.author.firstname=user.firstname,$scope.historySession.historyType="creation",$scope.historySession.date=new Date,$scope.session.dateCreate=new Date,$scope.session.historyList.push($scope.historySession),delete $scope.session.categoryAge.listStaffMember,sessionRestAPI.addSession($scope.session).success(function(data){$scope.session=data,$window.history.back()})},$scope.addExerciseToSession=function(id){exerciseRestAPI.getExercise(id).success(function(data){$scope.exercise=data,$scope.exerciseSession={},$scope.exerciseSession.exercise=$scope.exercise,$scope.isThemeCollapsed=!0,$scope.session.exerciseSessionList.push($scope.exerciseSession.exercise)})},$scope.deleteExerciseSession=function(id){$scope.session.exerciseSessionList.splice(id,1)}}]).controller("EditSessionCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","exerciseRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","sessionRestAPI","$window","user","themeService","$log","meta","themeRestAPI","personRestAPI",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,exerciseRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,sessionRestAPI,$window,user,themeService,$log,meta,themeRestAPI,personRestAPI){
$translatePartialLoader.addPart("training"),$scope.theme={},$scope.themes=[],$scope.themeLabels=[],$scope.subthemesListAutoComplete=[],$scope.subThemeLabels=[],$scope.session={},$scope.session.file={},$scope.historySession={},$scope.session.categoryAge={},$scope.historySession.author={},$scope.session.historyList=[],$scope.session.commentList=[],$scope.commentList=[],$scope.comment={},$scope.comentValue={},$scope.theme.activityId=meta.activity.code,$scope.session.author={},$scope.userCorrent=user,$scope.comentValue.value="",$scope.authorPicture=user.avatar,$scope.session.author._id=user._id,$scope.session.author.name=user.name,$scope.session.author.firstname=user.firstname,$scope.isThemeCollapsed=!0,$scope.count=0,$scope.sessionId=$routeParams.id,sessionRestAPI.getSession($routeParams.id).success(function(data){$scope.session=data,$scope.categories.forEach(function(b){$scope.session.categoryAge.code===b.code&&($scope.session.categoryAge=b)});var listIdUsers=[],listFields=[];if(listFields.push("avatar"),listFields.push("name"),listFields.push("firstname"),"undefined"!=typeof $scope.session.commentList){for(var i=0;i<$scope.session.commentList.length;i++)listIdUsers.push($scope.session.commentList[i].authorId);var promise=personRestAPI.getListPerson(listIdUsers,listFields);promise.then(function(data){$scope.users=data.data;for(var i=0;i<listIdUsers.length;i++){for(var object={},j=0;j<$scope.users.length;j++)listIdUsers[i]==$scope.users[j]._id&&(object={author:$scope.users[j],comment:$scope.session.commentList[i]});$scope.commentList.push(object)}})}else $scope.session.commentList=[]});var promise=themeService.getThemes($scope.theme.activityId);promise.then(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.data.length;i++)$scope.themeLabels.push($scope.themes.data[i].label);$scope.themesListAutoComplete=themeService.unique($scope.themeLabels),$scope.$watch("session.theme.label",function(newValue,oldValue){if($scope.count++,"undefined"!=typeof $scope.session.subTheme&&$scope.count>2&&($scope.session.subTheme.label=""),$scope.subthemesListAutoComplete=[],"undefined"!=typeof $scope.themes.data)for(var i=0;i<$scope.themes.data.length;i++)if($scope.themes.data[i].label==newValue){var nbrSubtheme=$scope.themes.data[i].subThemesList.length;$scope.theme=$scope.themes.data[i];for(var j=0;nbrSubtheme>j;j++)$scope.subthemesListAutoComplete.push($scope.themes.data[i].subThemesList[j].label);$scope.subthemesListAutoComplete=themeService.unique($scope.subthemesListAutoComplete);break}console.log($scope.subthemesListAutoComplete)},!0)}),$scope.$watch(function(){return $filter("translate")("training.session.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.addExerciseToSession=function(id){exerciseRestAPI.getExercise(id).success(function(data){$scope.exercise=data,$scope.exerciseSession={},$scope.exerciseSession.exercise=$scope.exercise,$scope.session.exerciseSessionList.push($scope.exerciseSession.exercise)})},$scope.cancel=function(){$window.history.back()},$scope.addComent=function(){$scope.comment={},$scope.comment.authorId=user._id,$scope.comment.dateCreate=new Date,$scope.comment.content=$scope.comentValue.value,$scope.session.commentList.push($scope.comment);var object={author:user,comment:$scope.comment};$scope.commentList.push(object),$scope.comentValue.value="",$scope.session._id=$scope.sessionId,sessionRestAPI.updateSession($scope.session).success(function(data){$scope.session=data})},$scope.removeComent=function(id){var index=$scope.session.commentList.indexOf($scope.commentList[id].comment);$scope.session.commentList.splice(index,1),$scope.commentList.splice(id,1),$scope.session._id=$scope.sessionId,sessionRestAPI.updateSession($scope.session).success(function(data){$scope.session=data})},$scope.editComent=function(id){$scope.comentValue.value=$scope.commentList[id].comment.content;var index=$scope.session.commentList.indexOf($scope.commentList[id].comment);$scope.session.commentList.splice(index,1),$scope.commentList.splice(id,1)},$scope.updateSession=function(){if(""!==$scope.session.theme.label){var themeExist=$scope.themesListAutoComplete.indexOf($scope.session.theme.label);if(-1==themeExist)$scope.theme.label=$scope.session.theme.label,$scope.theme.subThemesList=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.theme.subThemesList.push({label:$scope.session.subTheme.label}),themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data});else if(""!==$scope.session.subTheme.label){var subthemExist=$scope.subthemesListAutoComplete.indexOf($scope.session.subTheme.label);"-1"==subthemExist&&($scope.theme.subThemesList.push({label:$scope.session.subTheme.label}),themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data}))}}$scope.historySession.author._id=user._id,$scope.historySession.author.name=user.name,$scope.historySession.author.firstname=user.firstname,$scope.historySession.date=new Date,$scope.historySession.historyType="modification","undefined"==typeof $scope.session.commentList&&($scope.session.commentList=[]),$scope.session.historyList.push($scope.historySession),delete $scope.session.categoryAge.listStaffMember,$scope.session._id=$scope.sessionId,sessionRestAPI.updateSession($scope.session).success(function(data){$scope.session=data,$window.history.back()})},$scope.deleteExerciseSession=function(id){$scope.session.exerciseSessionList.splice(id,1)}}]).controller("SearchSessionCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","exerciseRestAPI","$window","user","themeService","$log","meta","sessionRestAPI","personRestAPI",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,exerciseRestAPI,$window,user,themeService,$log,meta,sessionRestAPI,personRestAPI){$translatePartialLoader.addPart("training"),$scope.sessionsList=[],$scope.session={},$scope.session.categoryAge={},exits=0,listTempSession=[],$scope.searchSession=function(){sessionRestAPI.getListSession($scope.session.categoryAge.label,$scope.session.author,$scope.session.theme,$scope.session.subTheme,$scope.session.label).success(function(data){$scope.sessionsList=data,$scope.sessionsList.forEach(function(it){""!==$scope.session.key&&"undefined"!=typeof it.description&&(exits=it.description.indexOf($scope.session.key),-1!==exits&&listTempSession.push(it))}),0!==listTempSession.length&&($scope.sessionsList=listTempSession)})},$scope.$watch(function(){return $filter("translate")("training.session.search")},function(newval){eventbus.prepForBroadcast("title",newval)}),structureCfgRestAPI.getCategoriesAgeStrList($scope.meta.season.code,$scope.meta.structure._id).success(function(data){$scope.categories=data;var found=!1;data.forEach(function(b){$scope.currentCategoryId===b.code?(found=!0,$scope.currentCategory=b,$scope.session.categoryAge=b):b.listStaffMember.forEach(function(c){c.personId===$scope.user._id&&($scope.currentCategory=b,$scope.session.categoryAge=b,found=!0)})}),found||($scope.currentCategory=data[0],$scope.session.categoryAge=data[0])}),$scope.cancel=function(){$window.history.back()}}]),angular.module("themeMod",["labelsAPI","structureCfgRestAPI","summarysheet","effectiveRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","staffListWidget","planingSessionWidget","unavailableEffectiveWidget","palmaresEffectiveWidget","themeService","profileRestAPI","groupAPI","labelsAPI","statAPI","effectiveSearch","themeRestAPI","locationAPI","ui.utils"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/training/theme/add",{controller:"AddThemeCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/theme/addTheme.html"}).when("/private/training/theme/edit/:idTheme",{controller:"EditThemeCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/theme/editTheme.html"})}]).controller("AddThemeCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","themeRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","$window","themeService","user","meta",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,themeRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,$window,themeService,user,meta){function getThemeList(activityId){themeRestAPI.getListTheme(activityId).success(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.length;i++){$scope.themeLabels.push($scope.themes[i].label);for(var j=0;j<$scope.themes[i].subThemesList.length;j++)$scope.subThemeLabels.push($scope.themes[i].subThemesList[j].label)}$scope.subThemeLabels=themeService.unique($scope.subThemeLabels),$scope.themeLabels=themeService.unique($scope.themeLabels)})}function addTheme(){var exist=!1;$scope.themes.forEach(function(b){$scope.theme.label==b.label&&(exist=!0)}),exist===!1?themeRestAPI.addTheme($scope.theme).success(function(data){$scope.theme=data,$window.history.back()}):$scope.exist.value="visible"}$translatePartialLoader.addPart("training"),$scope.theme={},$scope.theme.subThemesList=[],$scope.themes=[],$scope.themeLabels=[],$scope.subThemeLabels=[],$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,$scope.exist={},$scope.exist.value="hidden",getThemeList($scope.theme.activityId),$scope.deleteSubTheme=function(id){$scope.theme.subThemesList.splice(id,1)},$scope.addSubTheme=function(){$scope.theme.subThemesList.push({label:"",description:""})},$scope.cancel=function(){$window.history.back()},$scope.addTheme=function(){addTheme()}}]).controller("EditThemeCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","themeRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","$window","themeService","user","meta",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,themeRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,$window,themeService,user,meta){function getTheme(id){themeRestAPI.getTheme(id).success(function(data){$scope.theme=data})}function getThemeList(activityId){themeRestAPI.getListTheme(activityId).success(function(data){$scope.themes=data;for(var i=0;i<$scope.themes.length;i++){$scope.themeLabels.push($scope.themes[i].label);for(var j=0;j<$scope.themes[i].subThemesList.length;j++)$scope.subThemeLabels.push($scope.themes[i].subThemesList[j].label)}$scope.subThemeLabels=themeService.unique($scope.subThemeLabels),$scope.themeLabels=themeService.unique($scope.themeLabels)})}function updateTheme(){var exist=!1;$scope.themes.forEach(function(b){$scope.theme.label==b.label&&b._id!=$scope.theme._id&&(exist=!0)}),exist===!1?themeRestAPI.updateTheme($scope.theme).success(function(data){$scope.theme=data,$window.history.back()}):$scope.exist.value="visible"}$translatePartialLoader.addPart("training");var idTheme=$routeParams.idTheme;$scope.theme={},$scope.themes=[],$scope.themeLabels=[],$scope.subThemeLabels=[],$scope.exist={},$scope.exist.value="hidden",$scope.theme.author={_id:user._id,name:user.name,firstname:user.firstname,avatar:user.avatar,contact:user.contact},$scope.theme.activityId=meta.activity.code,$scope.theme.structureId=meta.structure._id,getThemeList($scope.theme.activityId),$scope.deleteSubTheme=function(id){$scope.theme.subThemesList.splice(id,1)},$scope.addSubTheme=function(){$scope.theme.subThemesList.push({label:"",description:""})},$scope.cancel=function(){$window.history.back()},$scope.editTheme=function(){updateTheme()},getTheme(idTheme)}]),angular.module("themeService",["labelsAPI","structureCfgRestAPI","summarysheet","effectiveRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","staffListWidget","planingSessionWidget","unavailableEffectiveWidget","palmaresEffectiveWidget","exerciseRestAPI","profileRestAPI","groupAPI","labelsAPI","statAPI","effectiveSearch","themeRestAPI","locationAPI","ui.utils","ui.bootstrap","fileread"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict"}]).service("themeService",["themeRestAPI",function(themeRestAPI){this.unique=function(origArr){var found,x,y,newArr=[],origLen=origArr.length;for(x=0;origLen>x;x++){for(found=void 0,y=0;y<newArr.length;y++)if(origArr[x]===newArr[y]){found=!0;break}found||newArr.push(origArr[x])}return newArr},this.getThemes=function(activityId){var promise=themeRestAPI.getListTheme(activityId).success(function(data){});return promise},this.getTheme=function(activityId){var promise=themeRestAPI.getListTheme(activityId).success(function(data){});return promise}}]),angular.module("trainingMod",["labelsAPI","structureCfgRestAPI","summarysheet","effectiveRestAPI","ngTable","ngTableExport","statWidget","userMetaAPI","staffListWidget","planingSessionWidget","unavailableEffectiveWidget","palmaresEffectiveWidget","commonsDirectives","themeService","profileRestAPI","groupAPI","labelsAPI","statAPI","effectiveSearch","exerciseRestAPI","themeRestAPI","locationAPI","ui.utils"]).config(["$routeProvider","metaDatasProvider",function($routeProvider,metaDatasProvider){"use strict";$routeProvider.when("/private/training/dashboard",{controller:"TrainingDashboardCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/dashboard.html"}).when("/private/training/dashboardTheme",{controller:"ThemeDashboardCtrl",reloadOnSearch:!1,resolve:{user:metaDatasProvider.checkUser,meta:metaDatasProvider.getMeta},templateUrl:"templates/prive/training/theme/themeDashboard.html"})}]).controller("TrainingDashboardCtrl",["$log","$route","$routeParams","$scope","$rootScope","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","$window",function($log,$route,$routeParams,$scope,$rootScope,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,$window){$translatePartialLoader.addPart("training"),eventbus.prepForBroadcast("left-menu","training.dashboard"),$scope.$watch(function(){return $filter("translate")("training.dashboard.title")},function(newval){eventbus.prepForBroadcast("title",newval)})}]).controller("ThemeDashboardCtrl",["$log","$window","$route","$routeParams","$scope","$rootScope","themeRestAPI","$timeout","$modal","structureCfgRestAPI","eventbus","groupAPI","effectiveRestAPI","statAPI","profileRestAPI","$q","ngTableParams","$filter","$location","$translatePartialLoader","meta","user",function($log,$window,$route,$routeParams,$scope,$rootScope,themeRestAPI,$timeout,$modal,structureCfgRestAPI,eventbus,groupAPI,effectiveRestAPI,statAPI,profileRestAPI,$q,ngTableParams,$filter,$location,$translatePartialLoader,meta,user){function getThemeList(activityId){themeRestAPI.getListTheme(activityId).success(function(data){$scope.themes=data,$scope.temp=$scope.themes})}$translatePartialLoader.addPart("training"),$scope.doTheBack=function(){$window.history.back()},$scope.themes=[],$scope.checkboxValue={value:!1,value1:!1},$scope.exists={};var activityId=meta.activity.code,structureId=meta.structure._id,authorId=user._id;$scope.$watch(function(){return $filter("translate")("training.dashboard.maintitle")},function(newval){eventbus.prepForBroadcast("title",newval)}),$scope.onlyThemesCreatedByMe=function(){var result=[];if($scope.checkboxValue.value===!0){for(var i=0;i<$scope.themes.length;i++)authorId==$scope.themes[i].author._id&&result.push($scope.themes[i]);$scope.themes=result}else $scope.themes=$scope.temp},$scope.onlyThemesOfMyStructure=function(){var result=[];if($scope.checkboxValue.value1===!0){for(var i=0;i<$scope.themes.length;i++)structureId==$scope.themes[i].structureId&&result.push($scope.themes[i]);$scope.themes=result}else $scope.themes=$scope.temp},$scope.isThemeCollapsed=!0,getThemeList(activityId)}]),angular.module("blogAdmin",["adminBlogAPI","adminmenu"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/admin/blogposts",{controller:"AdminBlogsCtrl",templateUrl:"templates/admin/blogs.html"}).when("/admin/blogposts/edit/:id",{controller:"AdminBlogDetailCtrl",templateUrl:"templates/admin/blogDetail.html"}).when("/admin/blogposts/new",{controller:"AdminBlogAddCtrl",templateUrl:"templates/admin/blogDetail.html"})}]).controller("AdminBlogsCtrl",["$scope","eventbus","adminBlogAPI","$location","$filter",function($scope,eventbus,adminBlogAPI,$location,$filter){$scope.blogposts=void 0,$scope.loadData=function(){adminBlogAPI.get().success(function(data){$scope.blogposts=data})},$scope.del=function(idblog,title){modalConfirm($filter("translate")("popup.title.delete.blogpost"),$filter("translate")("popup.message.delete")+title+".<br />"+$filter("translate")("popup.confirm.ask"),function(){adminBlogAPI.del(idblog).success(function(data){toastr.success(title+$filter("translate")("popup.success.delete")),$scope.loadData()})})},$scope.loadData()}]).controller("AdminBlogAddCtrl",["$scope","eventbus","adminBlogAPI","$http","$location","$filter",function($scope,eventbus,adminBlogAPI,$http,$location,$filter){$scope.curblogpost={},$scope.curblogpost.title="Sans nom",$scope.addorupdate=function(){$scope.curblogpost.exerp.isBlank()&&($scope.curblogpost.exerp=$scope.curblogpost.content.stripTags().truncate(150)),adminBlogAPI.add($scope.curblogpost).success(function(data){toastr.success(data.title+$filter("translate")("popup.success.added")),$location.path("/admin/blogposts/edit/"+data._id)})}}]).controller("AdminBlogDetailCtrl",["$scope","eventbus","adminBlogAPI","$routeParams","$location","$filter",function($scope,eventbus,adminBlogAPI,$routeParams,$location,$filter){$scope.curblogpost={},$scope.loadData=function(){adminBlogAPI.getDetail($routeParams.id).success(function(data){$scope.curblogpost=data})},$scope.addorupdate=function(){$scope.curblogpost.exerp.isBlank()&&($scope.curblogpost.exerp=$scope.curblogpost.content.stripTags().truncate(150)),adminBlogAPI.add($scope.curblogpost).success(function(data,status,headers,config){$location.path("/admin/blogposts"),toastr.success(data.title+$filter("translate")("popup.success.updated"))})},$scope.loadData()}]),angular.module("public",["publicSignup","ngRoute","publicRestAPI","reCAPTCHA"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/",{controller:"WelcomeCtrl",templateUrl:"templates/public/home.html"}).when("/!",{controller:"WelcomeCtrl",templateUrl:"templates/public/home.html"}).when("/welcome",{controller:"WelcomeCtrl",templateUrl:"templates/public/welcome.html"}).when("/about",{controller:"AboutCtrl",templateUrl:"templates/public/about.html"}).when("/mentionslegales",{controller:"MentionslegalesCtrl",templateUrl:"templates/public/mentionslegales.html"}).when("/contact",{controller:"ContactCtrl",templateUrl:"templates/public/contact.html"}).when("/blog",{controller:"BlogCtrl",templateUrl:"templates/public/blog.html"}).when("/pricing",{controller:"PricingCtrl",templateUrl:"templates/public/pricing.html"}).when("/verifyaccount/:id/:code",{controller:"AccountCtrl",templateUrl:"templates/public/welcome.html"}).when("/accountko",{templateUrl:"templates/public/accountKo.html"}).when("/accountok",{templateUrl:"templates/public/accountOk.html"}).when("/recoverpasswd/:id/:code",{controller:"RecoverPasswdCtrl",templateUrl:"templates/public/recoverpasswd.html"}).when("/features",{controller:"FeaturesCtrl",templateUrl:"templates/public/features.html"}).when("/offer/DISCOVERY",{controller:"DiscoveryOfferCtrl",templateUrl:"templates/public/offers/discovery.html"}).when("/offer/PREMIUM",{controller:"PremiumOfferCtrl",templateUrl:"templates/public/offers/premium.html"}).when("/offer/TEAM_PLUS",{controller:"TeamPlusOfferCtrl",templateUrl:"templates/public/offers/teamplus.html"}).when("/notPaid",{controller:"NotPaidCtrl",templateUrl:"templates/public/notPaid.html"})}]).controller("NotPaidCtrl",["$scope","$rootScope",function($scope,$rootScope){$scope.user=$rootScope.user,delete $rootScope.user,$scope.unpaid=[],angular.forEach($scope.user.account.listPlan,function(plan){"open"===plan.status&&this.push(plan)},$scope.unpaid),$scope.$on("$destroy",function(){delete $scope.user,delete $scope.unpaid})}]).controller("FeaturesCtrl",function(){}).controller("DiscoveryOfferCtrl",function(){}).controller("PremiumOfferCtrl",function(){}).controller("TeamPlusOfferCtrl",function(){}).controller("WelcomeCtrl",["$scope","$rootScope","$translatePartialLoader",function($scope,$rootScope,$translatePartialLoader){$translatePartialLoader.addPart("landing"),$translatePartialLoader.addPart("ui"),$translatePartialLoader.addPart("main"),$rootScope.$on("$viewContentLoaded",function(){$(".modal-trigger").leanModal({dismissible:!0,opacity:.7,in_duration:600,out_duration:200})})}]).controller("AboutCtrl",["$scope",function($scope){$scope.crew=["pascal","mathieu","christophe","xavier","jerome","you"]}]).controller("PricingCtrl",function(){}).controller("RecoverPasswdCtrl",["$scope","publicRestAPI","$routeParams","$location","$rootScope","$window","$filter",function($scope,publicRestAPI,$routeParams,$location,$rootScope,$window,$filter){$scope.user={},publicRestAPI.passwdCheck($routeParams.code,$routeParams.id).success(function(data){!0===data.status?($scope.show=!0,$scope.id=$routeParams.id,$scope.user=data.user):toastr.error($filter("translate")("popup.error.passwdurl"))}),$scope.updatePasswd=function(){if(void 0!==$scope.id&&$scope.passwdForm.$valid){var data={};data.code=$routeParams.code,data.id=$routeParams.id,data.passwd=$scope.passwd,data.captcha=$scope.captcha,publicRestAPI.resetPasswd(data).success(function(){toastr.success($filter("translate")("popup.success.newpasswd")),$location.path("/")}).error(function(error){error&&(error.code&&"CAPTCHA_EXCEPTION"===error.code?($window.Recaptcha.reload(),toastr.error($filter("translate")("popup.error."+error.code))):toastr.error(error.message))})}}}]).controller("AccountCtrl",["$scope","publicRestAPI","$routeParams","$location",function($scope,publicRestAPI,$routeParams,$location){publicRestAPI.accountCheck($routeParams.code,$routeParams.id).success(function(data){!0===data.status?$location.path("/accountok"):$location.path("/accountko")})}]).controller("MentionslegalesCtrl",function(){}).controller("ContactCtrl",["$scope","publicRestAPI","$filter","$translatePartialLoader",function($scope,publicRestAPI,$filter,$translatePartialLoader){$translatePartialLoader.addPart("landing"),$scope.subjects=Array.create(),$scope.subjects.push({id:"service",label:$filter("translate")("contact.ph.subject.line2")}),$scope.subjects.push({id:"suggestions",label:$filter("translate")("contact.ph.subject.line3")}),$scope.subjects.push({id:"product",label:$filter("translate")("contact.ph.subject.line4")}),$scope.contact={},$scope.validate=function(){publicRestAPI.sendMail($scope.contact).success(function(){$scope.contact={},toastr.success($filter("translate")("content.contact.label.success"))})},$scope.$on("$destroy",function(){delete $scope.subjects,delete $scope.contact})}]).controller("BlogCtrl",["$scope","publicRestAPI",function($scope,publicRestAPI){$scope.blogs=Array.create(),publicRestAPI.getBlogs().success(function(data){data.each(function(n){n.color=$scope.getRandomColor()}),$scope.blogs=data}),$scope.getRandomColor=function(){var i=Math.floor(6*Math.random()+1);switch(i){case 1:return"bg-success";case 2:return"bg-secondary";case 3:return"bg-info";case 4:return"bg-warning";case 5:return"bg-danger";case 6:return"bg-primary"}},$scope.$on("$destroy",function(){delete $scope.blogs})}]),angular.module("publicSignup",["paymentAPI","userInfosAPI","locationAPI","publicRestAPI"]).config(["$routeProvider",function($routeProvider){$routeProvider.when("/signup/:plan?",{controller:"SignupCtrl",templateUrl:"templates/public/signup/signup.html"}).when("/signup/coach/cancel",{controller:"SignupCancelCtrl",templateUrl:"templates/public/signup/signupCancel.html"}).when("/signup/coach/end/:id/:pid",{controller:"SignupEndCtrl",templateUrl:"templates/public/signup/signupEnd.html"})}]).controller("SignupEndCtrl",["$scope","$filter","$routeParams","paymentAPI","$log",function($scope,$filter,$routeParams,paymentAPI,$log){$scope.billinfo={},toastr.success($filter("translate")("popup.success.added")),$scope.loadUser=function(){paymentAPI.getDetail($routeParams.id,$routeParams.pid).success(function(data){$scope.curuser=data.person,$scope.billinfo=data.plan})},$scope.loadUser(),$scope.$on("$destroy",function(){delete $scope.curuser,delete $scope.billinfo})}]).controller("SignupCtrl",["$scope","$http","eventbus","userInfosAPI","paymentAPI","$routeParams","$filter","$location","reCAPTCHA","$window","$log","locationAPI","publicRestAPI",function($scope,$http,eventbus,userInfosAPI,paymentAPI,$routeParams,$filter,$location,reCAPTCHA,$window,$log,locationAPI,publicRestAPI){$scope.signup={address:{}},$scope.plan={levelPlan:$routeParams.plan},$scope.activities=Array.create(),$scope.showSpinner=!1,$scope.dateOption={minDate:new Date(1900,0,1,1,0,1),maxDate:new Date},$scope.phoneFormat=$filter("translate")("phone.format"),publicRestAPI.getActivities().success(function(data){$log.debug(data),$scope.activities=data,$("select").selectpicker({style:"btn-info"})}),$scope.registerUser=function(){userInfosAPI.registerUser($scope.signup).success(function(data){$log.debug(data),paymentAPI.getPaymentURL(data.planId,data.person._id).success(function(data){$window.location.href=data.url})}).error(function(error){$scope.showSpinner=!1,error&&(error.code&&"CAPTCHA_EXCEPTION"===error.code?($window.Recaptcha.reload(),toastr.error($filter("translate")("popup.error."+error.code))):toastr.error(error.message)),$log.error(error)})},$scope.prepareUser=function(){$scope.showSpinner=!0,$scope.signup.birthdate=$scope.dateOption.val,$scope.signup.plan=$scope.plan,angular.isDefined($scope.signup.address.formatedAddress)&&!$scope.signup.address.formatedAddress.isBlank()?locationAPI.get($scope.signup.address.formatedAddress).then(function(adr){$scope.signup.address.lat=adr.data.results[0].geometry.location.lat,$scope.signup.address.lng=adr.data.results[0].geometry.location.lng,angular.forEach(adr.data.results[0].address_components,function(item){item.types.count("street_number")>0&&($scope.signup.address.place=item.long_name+" "),item.types.count("route")>0&&($scope.signup.address.place+=item.long_name),item.types.count("locality")>0&&($scope.signup.address.city=item.long_name),item.types.count("postal_code")>0&&($scope.signup.address.zipcode=item.long_name),item.types.count("country")>0&&($scope.signup.address.country=item.long_name)}),$scope.registerUser()}):$scope.registerUser()},$scope.searchStructure=function(val){return $log.debug($scope.plan),publicRestAPI.searchStructure(val,$scope.plan.activity.code).then(function(res){return $log.debug(res.data),res.data})},$scope.getLocation=function(val){return locationAPI.get(val).then(function(res){var addresses=Array.create();return angular.forEach(res.data.results,function(item){addresses.push(item.formatted_address)}),addresses})},$scope.$on("$destroy",function(){delete $scope.signup,delete $scope.showSpinner,delete $scope.dateOption,delete $scope.birthdate,delete $scope.passwd,delete $scope.activities,delete $scope.plan})}]),angular.module("httpModule",["eventbus","chieffancypants.loadingBar","ngAnimate"]).config(["cfpLoadingBarProvider",function(cfpLoadingBarProvider){"use strict";cfpLoadingBarProvider.includeSpinner=!0}]).factory("httpInterceptor",["$q","$rootScope","eventbus","$window","ENV","$log",function($q,$rootScope,eventbus,$window,ENV,$log){"use strict";return{request:function(config){return config.url.startsWith("/rest")&&(config.headers["Content-Type"]="application/json",config.responseType="json"),(config.url.startsWith("/rest/prive")||config.url.startsWith("/rest/admin")||config.url.startsWith("/rest/logout")||config.url.startsWith("/rest/current"))&&(config.headers.token=$window.sessionStorage.qaobeesession),config.url.startsWith("template")||config.url.startsWith("js/i18n")||config.url.startsWith("http")||config.url.startsWith("ngTagsInput")||config.url.startsWith("ng-table")||(config.url.startsWith("/")?config.url=ENV.apiEndPoint+config.url:config.url=ENV.apiEndPoint+"/"+config.url),config||$q.when(config)},response:function(response){return response||$q.when(response)},responseError:function(response){return null!==response.data&&($log.error(response.data),null!==response.data.message&&["CAPTCHA_EXCEPTION","NON_ACTIVE"].findIndex(response.data.code)>1&&toastr.error(response.data.message),"NOT_LOGGED"===response.data.code&&(toastr.error(response.data.message),eventbus.prepForBroadcast("logoff",""))),$q.reject(response)}}}]),angular.module("adminindicatorAPI",[]).value("adminIndicatorURL","/rest/admin/indicator").factory("adminIndicatorAPI",["$http","adminIndicatorURL","$rootScope",function($http,adminIndicatorURL,$rootScope){return{get:function(){return $http({url:adminIndicatorURL,method:"GET"})},getByKey:function(libelleKey){return $http({url:adminIndicatorURL+"/getkey/?libelleKey="+key,method:"GET"})},getDetail:function(id){return $http({url:adminIndicatorURL+"/get/?id="+id,method:"GET"})},del:function(id){return $http({url:adminIndicatorURL+"/del/?id="+id,method:"DELETE"})},add:function(indicator){return $http({url:adminIndicatorURL+"/add",method:"PUT",data:indicator})}}}]),angular.module("adminMetricsAPI",[]).value("adminMetricsURL","/rest/admin/metrics").factory("adminMetricsAPI",["$http","adminMetricsURL","$rootScope",function($http,adminMetricsURL,$rootScope){return{getMeters:function(){return $http({url:adminMetricsURL+"/meters",method:"GET"})},getTimers:function(key){return $http({url:adminMetricsURL+"/timers",method:"GET"})}}}]),angular.module("adminHabilitAPI",[]).value("adminHabilitURL","/rest/admin/habilitations").factory("adminHabilitAPI",["$http","adminHabilitURL","$rootScope",function($http,adminHabilitURL,$rootScope){return{get:function(){return $http({url:adminHabilitURL,method:"GET"})},getByKey:function(key){return $http({url:adminHabilitURL+"/getkey/?key="+key,method:"GET"})},getDetail:function(id){return $http({url:adminHabilitURL+"/get/?id="+id,method:"GET"})},del:function(id){return $http({url:adminHabilitURL+"/del/?id="+id,method:"DELETE"})},add:function(habilit){return $http({url:adminHabilitURL+"/add",method:"PUT",data:habilit})}}}]),angular.module("labelsAPI",[]).value("labelsURL","/rest/listelabels").factory("labelsAPI",["$http","labelsURL","$rootScope",function($http,labelsURL,$rootScope){return{getListe:function(className){return $http({url:labelsURL+"/?className="+className,method:"GET",headers:{"Content-Type":"application/json",token:$rootScope.token}})}}}]),angular.module("activityCfgRestAPI",[]).value("activityCfgApiURL","/rest/prive/administration/settings/activitycfg").factory("activityCfgRestAPI",["$http","activityCfgApiURL","$rootScope",function($http,activityCfgApiURL,$rootScope){
return{getCategoriesAgeList:function(date,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listCategoryAge&date="+date+"&activityId="+activityId+"&countryId="+countryId,method:"GET"})},getCategoryAge:function(date,activityId,countryId,fieldCode){return $http({url:activityCfgApiURL+"/param",method:"POST",data:{paramField:"listCategoryAge",date:date,activityId:activityId,countryId:countryId,fieldCode:fieldCode}})},getLevelGameList:function(date,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listLevelGame&date="+date+"&activityId="+activityId+"&countryId="+countryId,method:"GET"})},getRoleList:function(date,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listRoleStr&date="+date+"&activityId="+activityId+"&countryId="+countryId,method:"GET"})},getGenderList:function(date,seasonCode,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listGender&seasonCode="+seasonCode+"&activityId="+activityId+"&countryId="+countryId+"&date="+date,method:"GET"})},getRubricSheetList:function(seasonCode,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listRubricSheet&seasonCode="+seasonCode+"&activityId="+activityId+"&countryId="+countryId,method:"GET"})},getLicenseTypeList:function(date,seasonCode,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listTypeLicense&seasonCode="+seasonCode+"&activityId="+activityId+"&countryId="+countryId+"&date="+date,method:"GET"})},getCaracteristicPlayer:function(seasonCode,activityId,countryId,positionType,typeCarac){return $http({url:activityCfgApiURL+"/caracteristicPlayer?=seasonCode="+seasonCode+"&activityId="+activityId+"&countryId="+countryId+"&positionType="+positionType+"&typeCarac="+typeCarac,method:"GET"})},getAvailabilityStatusList:function(seasonCode,activityId,countryId){return $http({url:activityCfgApiURL+"/params?paramFieldList=listAvailabityStatus&seasonCode="+seasonCode+"&activityId="+activityId+"&countryId="+countryId,method:"GET"})}}}]),angular.module("activityAPI",[]).value("activityApiURL","/rest/prive/administration/settings/activity").factory("activityAPI",["$http","activityApiURL","$rootScope",function($http,activityApiURL,$rootScope){return{getList:function(){return $http({url:activityApiURL+"/list",method:"GET"})},getListActive:function(){return $http({url:activityApiURL+"/listActive",method:"GET"})},getDetail:function(id){return $http({url:activityApiURL+"/get/?id="+id,method:"GET"})},del:function(id){return $http({url:activityApiURL+"/del/?id="+id,method:"DELETE"})},add:function(activity){return $http({url:activityApiURL+"/add",method:"PUT",data:activity})}}}]),angular.module("niveauxJeuAPI",[]).value("niveauxJeuURL","/rest/niveauxjeuliste").factory("niveauxJeuAPI",["$http","niveauxJeuURL","$rootScope",function($http,niveauxJeuURL,$rootScope){return{getListe:function(){return $http({url:niveauxJeuURL,method:"GET",headers:{"Content-Type":"application/json",token:$rootScope.token}})}}}]),angular.module("seasonsAPI",[]).value("seasonsApiURL","/rest/prive/administration/settings/season").factory("seasonsAPI",["$http","seasonsApiURL",function($http,seasonsApiURL){return{getSeasonCurrent:function(activityId,countryId){return $http({url:seasonsApiURL+"/getseasoncurrent/?activityId="+activityId+"&countryId="+countryId,method:"GET"})},getList:function(activityId,countryId){return $http({url:seasonsApiURL+"/list?activityId="+activityId+"&countryId="+countryId,method:"GET"})},getDetail:function(id){return $http({url:seasonsApiURL+"/get/?id="+id,method:"GET"})},del:function(id){return $http({url:seasonsApiURL+"/del/?id="+id,method:"DELETE"})},add:function(season){return $http({url:seasonsApiURL+"/add",method:"PUT",data:season})},getStructureSeasonsList:function(activityId,structureId){return $http({url:seasonsApiURL+"/listStructure?activityId="+activityId+"&structureId="+structureId,method:"GET"})}}}]),angular.module("adminUsersAPI",[]).value("adminUsersURL","/rest/admin/users").factory("adminUsersAPI",["$http","adminUsersURL","$rootScope",function($http,adminUsersURL,$rootScope){return{get:function(){return $http({url:adminUsersURL,method:"GET"})},getDetail:function(id){return $http({url:adminUsersURL+"/get/?id="+id,method:"GET"})},del:function(id){return $http({url:adminUsersURL+"/del/?id="+id,method:"DELETE"})},add:function(user){return $http({url:adminUsersURL+"/add",method:"PUT",data:user})}}}]),angular.module("localityWoundAPI",[]).value("localityWoundURL","/rest/localitywound").factory("localityWoundAPI",["$http","localityWoundURL","$rootScope",function($http,localityWoundURL,$rootScope){return{getListe:function(){return $http({url:localityWoundURL,method:"GET",headers:{"Content-Type":"application/json",token:$rootScope.token}})}}}]),angular.module("typeWoundAPI",[]).value("typeWoundURL","/rest/typewound").factory("typeWoundAPI",["$http","typeWoundURL","$rootScope",function($http,typeWoundURL,$rootScope){return{getListe:function(){return $http({url:typeWoundURL,method:"GET",headers:{"Content-Type":"application/json",token:$rootScope.token}})}}}]),angular.module("effectiveRestAPI",[]).value("effectiveAPIURL","/rest/prive/organization/effective/effective").factory("effectiveRestAPI",["$http","effectiveAPIURL",function($http,effectiveAPIURL){return{getListMemberEffective:function(seasonCode,structureId,categoryAgeCode){return $http({url:effectiveAPIURL+"/list",method:"POST",data:{structureId:structureId,categoryAgeCode:categoryAgeCode,seasonCode:seasonCode}})},add:function(effective){return $http({url:effectiveAPIURL+"/add",method:"PUT",data:effective})},update:function(effective){return $http({url:effectiveAPIURL+"/update",method:"PUT",data:effective})}}}]),angular.module("groupAPI",[]).value("groupURL","/rest/prive/groups").factory("groupAPI",["$http","groupURL",function($http,groupURL){return{getActiveGroupsCategory:function(structureId,categoryAgeCode){return $http({url:groupURL+"/groupsCategory",method:"POST",data:{structureId:structureId,categoryAgeCode:categoryAgeCode,history:!1}})},getHistoryGroupCategory:function(structureId,categoryAgeCode){return $http({url:groupURL+"/groupsCategory",method:"POST",data:{structureId:structureId,categoryAgeCode:categoryAgeCode,history:!0}})},getGroup:function(id){return $http({url:groupURL+"/get",method:"POST",data:{groupId:id}})},addGroup:function(group){return $http({url:groupURL+"/add",method:"PUT",data:group})}}}]),angular.module("noteAPI",[]).value("noteURL","/rest/prive/notes").factory("noteAPI",["$http","noteURL","$rootScope",function($http,noteURL,$rootScope){return{getListeNotesByPerson:function(id){return $http({url:noteURL+"/liste?idIndividu="+id,method:"GET",headers:{"Content-Type":"application/json",token:$rootScope.token}})},upsert:function(note){return $http({url:noteURL,method:"PUT",data:note,headers:{"Content-Type":"application/json",token:$rootScope.token}})}}}]),angular.module("structureCfgRestAPI",[]).value("structureCfgApiURL","/rest/prive/organization/structure/structureCfg").factory("structureCfgRestAPI",["$http","structureCfgApiURL","$rootScope",function($http,structureCfgApiURL,$rootScope){return{getCategoriesAgeStrList:function(seasonCode,structureId){return $http({url:structureCfgApiURL+"/params?paramFieldList=listCategoryAge&seasonCode="+seasonCode+"&structureId="+structureId,method:"GET"})},getCategoryAge:function(seasonCode,structureId,fieldCode){return $http({url:structureCfgApiURL+"/param",method:"POST",data:{paramField:"listCategoryAge",structureId:structureId,fieldCode:fieldCode,seasonCode:seasonCode}})},getTeamsStrList:function(seasonCode,structureId){return $http({url:structureCfgApiURL+"/params?paramFieldList=listTeams&seasonCode="+seasonCode+"&structureId="+structureId,method:"GET"})}}}]),angular.module("teamCfgRestAPI",[]).value("teamCfgApiURL","/rest/prive/organization/structure/teamCfg").factory("teamCfgRestAPI",["$http","teamCfgApiURL","$rootScope",function($http,teamCfgApiURL,$rootScope){return{addTeamCfg:function(teamCfg){return $http({url:teamCfgApiURL+"/teamCfg_add",method:"PUT",data:teamCfg})},getTeamCfg:function(teamId){return $http({url:teamCfgApiURL+"/teamCfg_get?teamId="+teamId,method:"GET"})},getTeamCfgList:function(teamId,season){return $http({url:teamCfgApiURL+"/teamCfg_list?teamId="+teamId+"&season="+season,method:"GET"})},updateTeamCfg:function(teamCfg){return $http({url:teamCfgApiURL+"/teamCfg_update",method:"PUT",data:teamCfg})}}}]),angular.module("teamRestAPI",[]).value("teamApiURL","/rest/prive/organization/structure/team").factory("teamRestAPI",["$http","teamApiURL",function($http,teamApiURL){return{addTeam:function(team){return $http({url:teamApiURL+"/team_add",method:"PUT",data:team})},getTeam:function(teamId){return $http({url:teamApiURL+"/team_get?_id="+teamId,method:"GET"})},getTeamList:function(structureId,categoryAge){return $http({url:teamApiURL+"/team_list?structureId="+structureId+"&categoryAge="+categoryAge,method:"GET"})},updateTeam:function(team){return $http({url:teamApiURL+"/team_update",method:"PUT",data:team})}}}]),angular.module("profileRestAPI",[]).value("profileURL","/rest/prive/profile").factory("profileRestAPI",["$http","profileURL","$rootScope",function($http,profileURL,$rootScope){return{update:function(u){return $http({url:profileURL,method:"POST",data:u})},uploadAvatar:function(uid){return $http({url:"/file/avatar/"+uid,method:"POST",headers:{token:$rootScope.token}})},getPrefDetails:function(key,id){return $http({url:profileURL+"/preference/getPrefDetails?idPerson="+id+"&preferenceCode="+key,method:"GET"})},setPreference:function(key,data,id){return $http({url:profileURL+"/preference/setPreference",method:"POST",data:{idPerson:id,preferenceCode:key,preferenceData:data}})}}}]),angular.module("statAPI",[]).value("statAPIURL","/rest/prive/stats/").factory("statAPI",["$http","statAPIURL",function($http,statAPIURL){return{getListDetailValue:function(search){return $http({url:statAPIURL+"statistics/getListDetailValue",method:"POST",data:search})},getStatGroupBy:function(search){return $http({url:statAPIURL+"statistics/getStatGroupBy",method:"POST",data:search})},getSimpleList:function(search){return $http({url:statAPIURL+"configuration/getListIndicators",method:"POST",data:search})},getIndicatorCfg:function(search){return $http({url:statAPIURL+"configuration/getByCode",method:"POST",data:search})},addStat:function(stat){return $http({url:statAPIURL+"statistics/add",method:"PUT",data:stat})}}}]),angular.module("QSwarn.statisticsConfigAPI",[]).value("statisticsConfigAPIURL","/rest/prive/stats/configuration/").factory("statisticsConfigAPI",["$http","statisticsConfigAPIURL",function($http,statisticsConfigAPIURL){return{getListIndicators:function(activityId,countryId,screen){return $http({url:statisticsConfigAPIURL+"getListIndicators",method:"POST",data:{activityId:activityId,countryId:countryId,screen:screen}})},getByCode:function(search){return $http({url:statisticsConfigAPIURL+"getByCode",method:"POST",data:search})}}}]),angular.module("structureAPI",[]).value("structureURL","/rest/prive/structure").factory("structureAPI",["$http","structureURL","$rootScope",function($http,structureURL,$rootScope){return{get:function(id){return $http({url:structureURL+"/get/?id="+id,method:"GET",headers:{"Content-Type":"application/json",token:$rootScope.token}})}}}]),angular.module("cycleRestAPI",[]).value("cycleAPIURL","/rest/prive/training").factory("cycleRestAPI",["$http","cycleAPIURL",function($http,cycleAPIURL){return{addCycle:function(cycle){return $http({url:cycleAPIURL+"/cycle/add",method:"PUT",data:cycle})},getCycle:function(idCycle){return $http({url:cycleAPIURL+"/cycle/get?_id="+idCycle,method:"GET"})},getListCycle:function(categoryAge,authorName,theme,subTheme,title){return $http({url:cycleAPIURL+"/cycle/list?categoryAge="+categoryAge+"&name="+authorName+"&theme="+theme+"&subTheme="+subTheme+"&title="+title,method:"GET"})},updateCycle:function(cycle){return $http({url:cycleAPIURL+"/cycle/update",method:"PUT",data:cycle})},deleteCycle:function(idCycle){return $http({url:cycleAPIURL+"/cycle/delete?idCycle="+idCycle,method:"DELETE"})},addSessionToCycle:function(session){return $http({url:cycleAPIURL+"/cycle/addSession",method:"PUT",data:session})}}}]),angular.module("exerciseRestAPI",[]).value("exerciseAPIURL","/rest/prive/training").factory("exerciseRestAPI",["$http","exerciseAPIURL",function($http,exerciseAPIURL){return{addExercise:function(exercise){return $http({url:exerciseAPIURL+"/exercise/add",method:"PUT",data:exercise})},getExercise:function(idExercise){return $http({url:exerciseAPIURL+"/exercise/get?_id="+idExercise,method:"GET"})},getListExercise:function(categoryAge,authorName,theme,subTheme,title){return $http({url:exerciseAPIURL+"/exercise/list?categoryAge="+categoryAge+"&name="+authorName+"&theme="+theme+"&subTheme="+subTheme+"&title="+title,method:"GET"})},updateExercise:function(exercise){return $http({url:exerciseAPIURL+"/exercise/update",method:"PUT",data:exercise})},deleteExercise:function(idExercise){return $http({url:exerciseAPIURL+"/exercise/delete?idExercise="+idExercise,method:"DELETE"})}}}]),angular.module("sessionRestAPI",[]).value("sessionAPIURL","/rest/prive/training").factory("sessionRestAPI",["$http","sessionAPIURL",function($http,sessionAPIURL){return{addSession:function(session){return $http({url:sessionAPIURL+"/session/add",method:"PUT",data:session})},getSession:function(idSession){return $http({url:sessionAPIURL+"/session/get?_id="+idSession,method:"GET"})},getListSession:function(categoryAge,authorName,theme,subTheme,title){return $http({url:sessionAPIURL+"/session/list?categoryAge="+categoryAge+"&name="+authorName+"&theme="+theme+"&subTheme="+subTheme+"&title="+title,method:"GET"})},updateSession:function(session){return $http({url:sessionAPIURL+"/session/update",method:"PUT",data:session})},deleteSession:function(idSession){return $http({url:sessionAPIURL+"/session/delete?idSession="+idSession,method:"DELETE"})},addExerciseToSession:function(exercise){return $http({url:sessionAPIURL+"/session/addExercise",method:"PUT",data:exercise})}}}]),angular.module("themeRestAPI",[]).value("themeAPIURL","/rest/prive/training").factory("themeRestAPI",["$http","themeAPIURL",function($http,themeAPIURL){return{addTheme:function(theme){return $http({url:themeAPIURL+"/theme/add",method:"PUT",data:theme})},getTheme:function(idTheme){return $http({url:themeAPIURL+"/theme/get?_id="+idTheme,method:"GET"})},getListTheme:function(activityId){return $http({url:themeAPIURL+"/theme/list?activityId="+activityId,method:"GET"})},updateTheme:function(theme){return $http({url:themeAPIURL+"/theme/update",method:"PUT",data:theme})},deleteTheme:function(idTheme){return $http({url:themeAPIURL+"/theme/delete?idTheme="+idTheme,method:"DELETE"})}}}]),angular.module("adminBlogAPI",[]).value("adminBlogURL","/rest/admin/blogposts").factory("adminBlogAPI",["$http","adminBlogURL","$rootScope",function($http,adminBlogURL,$rootScope){return{get:function(){return $http({url:adminBlogURL,method:"GET"})},getDetail:function(id){return $http({url:adminBlogURL+"/get/?id="+id,method:"GET"})},del:function(id){return $http({url:adminBlogURL+"/del/?id="+id,method:"DELETE"})},add:function(blog){return $http({url:adminBlogURL+"/add",method:"PUT",data:blog})}}}]),angular.module("notificationsRestAPI",[]).value("notificationsURL","/rest/prive/notifications").factory("notificationsRestAPI",["$http","notificationsURL","$rootScope",function($http,notificationsURL,$rootScope){return{getuserNotifications:function(limit){return $http({url:notificationsURL+"?limit="+limit,method:"GET"})},del:function(id){return $http({url:notificationsURL+"/del/?id="+id,method:"DELETE"})},markAsRead:function(id){return $http({url:notificationsURL+"/read?id="+id,method:"POST"})}}}]),angular.module("personRestAPI",[]).value("personAPIURL","/rest/prive/transversal/person").factory("personRestAPI",["$http","personAPIURL",function($http,personAPIURL){return{getListPerson:function(listId,listField){return $http({url:personAPIURL+"/list",method:"POST",data:{listId:listId,listField:listField}})},getListPersonStructure:function(seasonCode,structureId){return $http({url:personAPIURL+"listStructure",method:"POST",data:{seasonCode:seasonCode,structureId:structureId}})},addPerson:function(person){return $http({url:personAPIURL+"/add",method:"PUT",data:person})},getPerson:function(id){return $http({url:personAPIURL+"/get/?id="+id,method:"GET"})},updatePerson:function(person){return $http({url:personAPIURL+"/update",method:"PUT",data:person})},updateEffectiveFeature:function(id,featureFolderName,featureKey,featureValue){return $http({url:personAPIURL+"/feature/update",method:"PUT",data:{id:id,featureFolderName:featureFolderName,featureKey:featureKey,featureValue:featureValue}})}}}]),angular.module("userMetaAPI",[]).value("userMetaURL","/rest/prive/meta").factory("userMetaAPI",["$http","userMetaURL",function($http,userMetaURL){return{getCurrentUser:function(){return $http({url:userMetaURL+"/current",method:"GET"})},getMetas:function(){return $http({url:userMetaURL,method:"GET"})},getUserById:function(id){return $http({url:userMetaURL+"/user?id="+id,method:"GET"})},getSeasonsInfo:function(activityId,structureId){return $http({url:userMetaURL+"/season?activityId="+activityId+"&structureId="+structureId,method:"GET"})}}}]),angular.module("paymentAPI",[]).value("paymentURL","/rest/payment").factory("paymentAPI",["$http","paymentURL",function($http,paymentURL){return{getPaymentURL:function(planId,personId){return $http({url:paymentURL+"/url",method:"POST",data:{planId:planId,personId:personId}})},getDetail:function(id,pid){return $http({url:paymentURL+"/get/?id="+id+"&pid="+pid,method:"GET"})}}}]),angular.module("publicRestAPI",[]).value("publicURL","/rest").factory("publicRestAPI",["$http","publicURL",function($http,publicURL){return{getBlogs:function(limit){return $http({url:publicURL+"/blogs?limit="+limit,method:"GET"})},accountCheck:function(code,id){return $http({url:publicURL+"/accountcheck/?code="+code+"&id="+id,method:"GET"})},passwdCheck:function(code,id){return $http({url:publicURL+"/passwdcheck/?code="+code+"&id="+id,method:"GET"})},resetPasswd:function(){return $http({url:publicURL+"/resetPasswd/",method:"POST"})},sendMail:function(data){return $http({url:publicURL+"/sendmail",method:"POST",data:data})},searchStructure:function(label,codeActivity){return $http({url:publicURL+"/searchStructure",method:"POST",data:{label:label,codeActivity:codeActivity}})},getActivities:function(){return $http({url:publicURL+"/getActivities",method:"GET"})}}}]),angular.module("userInfosAPI",[]).value("userInfosURL","/rest").factory("userInfosAPI",["$http","userInfosURL","$rootScope",function($http,userInfosURL,$rootScope){return{logon:function(login,passwd){return $http({url:userInfosURL+"/login",method:"POST",data:'{"login" : "'+login+'", "passwd" : "'+passwd+'"}'})},logoff:function(){return $http({url:userInfosURL+"/logout",method:"GET"})},registerUser:function(u){return $http({url:userInfosURL+"/register",method:"PUT",data:u})},usernameTest:function(login){return $http({url:userInfosURL+"/logintest",method:"POST",data:{login:login}})},forgotPasswd:function(login){return $http({url:userInfosURL+"/newpasswd",method:"POST",data:{login:login}})}}}]),angular.module("locationAPI",[]).factory("locationAPI",["$http",function($http){return{get:function(addr){return $http.get("http://maps.googleapis.com/maps/api/geocode/json",{params:{address:addr,sensor:!1}})}}}]),angular.module("common-config",["eventbus","userMetaAPI"]).provider("metaDatas",function(){"use strict";function loadAdmin(data){return data.isAdmin=!1,angular.isDefined(data.account)&&null!==data.account.habilitations&&data.account.habilitations.forEach(function(a){"admin_qaobee"===a.key&&(data.isAdmin=!0)}),data}this.$get=function(){},this.checkUser=function($rootScope,userMetaAPI,eventbus,$location,$q,$window){var deferred=$q.defer();if(angular.isDefined($rootScope.user))deferred.resolve($rootScope.user);else{var token=$window.sessionStorage.qaobeesession;null!==token&&angular.isDefined(token)?userMetaAPI.getCurrentUser().success(function(data){$rootScope.user=loadAdmin(data),eventbus.prepForBroadcast("login",$rootScope.user),deferred.resolve($rootScope.user)}):$location.path("/")}return deferred.promise},this.getMeta=function($rootScope,userMetaAPI,$location,$q,$window){var deferred=$q.defer();if(angular.isDefined($rootScope.meta))deferred.resolve($rootScope.meta);else{var token=$window.sessionStorage.qaobeesession;null!==token&&angular.isDefined(token)?userMetaAPI.getMetas().success(function(data){angular.isDefined(data)&&null!==data&&deferred.resolve(data)}):$location.path("/")}return deferred.promise}}),angular.module("eventbus",[]).factory("eventbus",["$rootScope",function($rootScope){"use strict";var sharedService={message:"",data:{}};return sharedService.prepForBroadcast=function(msg,data){this.message=msg,this.data=data,this.broadcastItem()},sharedService.broadcastItem=function(){$rootScope.$broadcast("eventbus")},sharedService}]),String.prototype.replaceAll=function(find,replace){"use strict";var str=this;return str.replace(new RegExp(find,"g"),replace)};